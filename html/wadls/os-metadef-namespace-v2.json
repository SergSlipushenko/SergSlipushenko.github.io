{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"/v2/metadefs/namespaces{?limit,marker,visibility,resource_types,sort_key,sort_dir}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"POST", "name":"Create namespace", "description":"\n \n Creates a namespace.\n \n \n The namespace is created with a Location header\n that contains the newly-created URI for the namespace.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.\",\n \"display_name\": \"Hypervisor Selection\",\n \"namespace\": \"OS::Compute::Hypervisor\",\n \"properties\": {\n \"hypervisor_type\": {\n \"description\": \"The hypervisor type.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n },\n \"vm_mode\": {\n \"description\": \"The virtual machine mode.\",\n \"enum\": [\n \"hvm\",\n \"xen\",\n \"uml\",\n \"exe\"\n ],\n \"title\": \"VM Mode\",\n \"type\": \"string\"\n }\n },\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"name\": \"OS::Glance::Image\"\n }\n ],\n \"visibility\": \"public\"\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.\",\n \"display_name\": \"Hypervisor Selection\",\n \"namespace\": \"OS::Compute::Hypervisor\",\n \"properties\": {\n \"hypervisor_type\": {\n \"description\": \"The hypervisor type.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n },\n \"vm_mode\": {\n \"description\": \"The virtual machine mode.\",\n \"enum\": [\n \"hvm\",\n \"xen\",\n \"uml\",\n \"exe\"\n ],\n \"title\": \"VM Mode\",\n \"type\": \"string\"\n }\n },\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"name\": \"OS::Glance::Image\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::Hypervisor\",\n \"visibility\": \"public\"\n}\n", "schema":"" } ] } ] }, { "method":"GET", "name":"List namespaces", "description":"\n Lists public namespaces.\n \n Returns a subset in the larger collection of namespaces and a\n link that you can use to get the next set of namespaces. Check\n for the presence of a next link and use it as the\n URI in a subsequent HTTP GET request. Follow this pattern\n until a next link is no longer provided. The\n next link preserves any query parameters that you\n send in your initial request. You can use the\n first link to return to the first page in the\n collection. If you prefer to paginate through namespaces\n manually, use the limit and marker\n parameters.\n \n \n The list operation accepts the resource_types and\n visibility query parameters, which let you filter\n the results in the returned collection.\n \n \n To sort the results of this operation, use the\n sort_key and sort_dir parameters.\n The API uses the natural sorting order in the namespace\n attribute that you provide as the sort_key\n parameter.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"first\": \"\/v2\/metadefs\/namespaces?sort_key=created_at&sort_dir=asc\",\n \"namespaces\": [\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"description\": \"The libvirt compute driver options. These are properties specific to compute drivers. For a list of all hypervisors, see here: https:\/\/wiki.openstack.org\/wiki\/HypervisorSupportMatrix.\",\n \"display_name\": \"libvirt Driver Options\",\n \"namespace\": \"OS::Compute::Libvirt\",\n \"owner\": \"admin\",\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Glance::Image\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::Libvirt\",\n \"updated_at\": \"2014-08-28T17:13:06Z\",\n \"visibility\": \"public\"\n },\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"description\": \"Compute drivers may enable quotas on CPUs available to a VM, disk tuning, bandwidth I\/O, and instance VIF traffic control. See: http:\/\/docs.openstack.org\/admin-guide-cloud\/compute-flavors.html\",\n \"display_name\": \"Flavor Quota\",\n \"namespace\": \"OS::Compute::Quota\",\n \"owner\": \"admin\",\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Nova::Flavor\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::Quota\",\n \"updated_at\": \"2014-08-28T17:13:06Z\",\n \"visibility\": \"public\"\n },\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"description\": \"Trusted compute pools with Intel\\u00ae Trusted Execution Technology (Intel\\u00ae TXT) support IT compliance by protecting virtualized data centers - private, public, and hybrid clouds against attacks toward hypervisor and BIOS, firmware, and other pre-launch software components.\",\n \"display_name\": \"Trusted Compute Pools (Intel\\u00ae TXT)\",\n \"namespace\": \"OS::Compute::Trust\",\n \"owner\": \"admin\",\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Nova::Flavor\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::Trust\",\n \"updated_at\": \"2014-08-28T17:13:06Z\",\n \"visibility\": \"public\"\n },\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"description\": \"This provides the preferred socket\/core\/thread counts for the virtual CPU instance exposed to guests. This enables the ability to avoid hitting limitations on vCPU topologies that OS vendors place on their products. See also: http:\/\/git.openstack.org\/cgit\/openstack\/nova-specs\/tree\/specs\/juno\/virt-driver-vcpu-topology.rst\",\n \"display_name\": \"Virtual CPU Topology\",\n \"namespace\": \"OS::Compute::VirtCPUTopology\",\n \"owner\": \"admin\",\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Glance::Image\",\n \"prefix\": \"hw_\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n },\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Cinder::Volume\",\n \"prefix\": \"hw_\",\n \"properties_target\": \"image\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n },\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Nova::Flavor\",\n \"prefix\": \"hw:\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::VirtCPUTopology\",\n \"updated_at\": \"2014-08-28T17:13:06Z\",\n \"visibility\": \"public\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespaces\"\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/metadefs/namespaces/{namespace}", "parameters":{ "namespace":{ "description":"\n \n Unique namespace.\n \n", "type":"xsd:string", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get namespaces details", "description":"\n \n Gets details for a specified namespace.\n \n \n The response body shows a single namespace entity with all\n details including properties and objects.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"description\": \"The libvirt compute driver options. These are properties specific to compute drivers. For a list of all hypervisors, see here: https:\/\/wiki.openstack.org\/wiki\/HypervisorSupportMatrix.\",\n \"display_name\": \"libvirt Driver Options\",\n \"namespace\": \"OS::Compute::Libvirt\",\n \"owner\": \"admin\",\n \"properties\": {\n \"hw_disk_bus\": {\n \"description\": \"Specifies the type of disk controller to attach disk devices to.\",\n \"enum\": [\n \"scsi\",\n \"virtio\",\n \"uml\",\n \"xen\",\n \"ide\",\n \"usb\"\n ],\n \"title\": \"Disk Bus\",\n \"type\": \"string\"\n },\n \"hw_machine_type\": {\n \"description\": \"Enables booting an ARM system using the specified machine type. By default, if an ARM image is used and its type is not specified, Compute uses vexpress-a15 (for ARMv7) or virt (for AArch64) machine types. Valid types can be viewed by using the virsh capabilities command (machine types are displayed in the machine tag).\",\n \"title\": \"Machine Type\",\n \"type\": \"string\"\n },\n \"hw_qemu_guest_agent\": {\n \"description\": \"It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS. For example, freezing and thawing filesystems, entering suspend. However, guest agent (GA) is not bullet proof, and hostile guest OS can send spurious replies.\",\n \"enum\": [\n \"yes\",\n \"no\"\n ],\n \"title\": \"QEMU Guest Agent\",\n \"type\": \"string\"\n },\n \"hw_rng_model\": {\n \"default\": \"virtio\",\n \"description\": \"Adds a random-number generator device to the image's instances. The cloud administrator can enable and control device behavior by configuring the instance's flavor. By default: The generator device is disabled. \/dev\/random is used as the default entropy source. To specify a physical HW RNG device, use the following option in the nova.conf file: rng_dev_path=\/dev\/hwrng\",\n \"title\": \"Random Number Generator Device\",\n \"type\": \"string\"\n },\n \"hw_scsi_model\": {\n \"default\": \"virtio-scsi\",\n \"description\": \"Enables the use of VirtIO SCSI (virtio-scsi) to provide block device access for compute instances; by default, instances use VirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI controller device that provides improved scalability and performance, and supports advanced SCSI hardware.\",\n \"title\": \"SCSI Model\",\n \"type\": \"string\"\n },\n \"hw_video_model\": {\n \"description\": \"The video image driver used.\",\n \"enum\": [\n \"vga\",\n \"cirrus\",\n \"vmvga\",\n \"xen\",\n \"qxl\"\n ],\n \"title\": \"Video Model\",\n \"type\": \"string\"\n },\n \"hw_video_ram\": {\n \"description\": \"Maximum RAM for the video image. Used only if a hw_video:ram_max_mb value has been set in the flavor's extra_specs and that value is higher than the value set in hw_video_ram.\",\n \"title\": \"Max Video Ram\",\n \"type\": \"integer\"\n },\n \"hw_vif_model\": {\n \"description\": \"Specifies the model of virtual network interface device to use. The valid options depend on the configured hypervisor. KVM and QEMU: e1000, ne2k_pci, pcnet, rtl8139, and virtio. VMware: e1000, e1000e, VirtualE1000, VirtualE1000e, VirtualPCNet32, VirtualSriovEthernetCard, and VirtualVmxnet. Xen: e1000, netfront, ne2k_pci, pcnet, and rtl8139.\",\n \"enum\": [\n \"e1000\",\n \"ne2k_pci\",\n \"pcnet\",\n \"rtl8139\",\n \"virtio\",\n \"e1000\",\n \"e1000e\",\n \"VirtualE1000\",\n \"VirtualE1000e\",\n \"VirtualPCNet32\",\n \"VirtualSriovEthernetCard\",\n \"VirtualVmxnet\",\n \"netfront\",\n \"ne2k_pci\"\n ],\n \"title\": \"Virtual Network Interface\",\n \"type\": \"string\"\n },\n \"os_command_line\": {\n \"description\": \"The kernel command line to be used by the libvirt driver, instead of the default. For linux containers (LXC), the value is used as arguments for initialization. This key is valid only for Amazon kernel, ramdisk, or machine images (aki, ari, or ami).\",\n \"title\": \"Kernel Command Line\",\n \"type\": \"string\"\n }\n },\n \"protected\": true,\n \"resource_type_associations\": [\n {\n \"created_at\": \"2014-08-28T17:13:06Z\",\n \"name\": \"OS::Glance::Image\",\n \"updated_at\": \"2014-08-28T17:13:06Z\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::Libvirt\",\n \"updated_at\": \"2014-08-28T17:13:06Z\",\n \"visibility\": \"public\"\n}\n", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update namespace", "description":"\n Updates a specified namespace.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the hardware specification required when a new vm is requested.\",\n \"display_name\": \"Hypervisor Selection\",\n \"namespace\": \"OS::Compute::Hypervisor\",\n \"protected\": false,\n \"visibility\": \"public\"\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"created_at\": \"2014-09-19T13:31:37Z\",\n \"description\": \"Choose capabilities that should be provided by the Compute Host. This provides the ability to fine tune the harware specification required when a new vm is requested.\",\n \"display_name\": \"Hypervisor Selection\",\n \"namespace\": \"OS::Compute::Hypervisor\",\n \"owner\": \"7ec22942411e427692e8a3436be1031a\",\n \"protected\": false,\n \"schema\": \"\/v2\/schemas\/metadefs\/namespace\",\n \"self\": \"\/v2\/metadefs\/namespaces\/OS::Compute::Hypervisor\",\n \"updated_at\": \"2014-09-19T13:31:37Z\",\n \"visibility\": \"public\"\n}\n", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Delete namespace", "description":"\n \n Deletes a specified namespace and its properties,\n objects, and any resource type associations.\n \n \n You cannot delete namespaces with the protected\n attribute set to true (boolean); the response returns the HTTP\n 403 status code.\n \n \n To delete a namespace, you must first make an update namespace\n request to set the protected attribute to false\n (boolean) on the namespace. Then, delete the namespace.\n \n \n If the operation succeeds, the response returns the HTTP 204\n status code.\n \n \n If you try to remove a namespace with the\n protected attribute set to true (boolean), the\n operation fails and the response returns the HTTP 403 error\n code.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] } ] } ] } ] }