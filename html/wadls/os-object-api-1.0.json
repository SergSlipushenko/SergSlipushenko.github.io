{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"/v1/endpoints", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List endpoints", "description":"\n Lists endpoints for an object, account, or\n container.\n When the cloud provider has enabled middleware to list the\n endpoints path, software that needs data location information\n can use this call to avoid network overhead. The cloud provider\n can customize the \/endpoints\/ path to another resource, so this\n exact resource may vary from provider to provider. Because it\n goes straight to the middleware, the call is not authenticated,\n so be sure you have tightly secured the environment and network\n when using this call.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"endpoints\": [\n \"http:\/\/storage02.swiftdrive:6002\/d2\/617\/AUTH_dev\",\n \"http:\/\/storage01.swiftdrive:6002\/d8\/617\/AUTH_dev\",\n \"http:\/\/storage01.swiftdrive:6002\/d11\/617\/AUTH_dev\"\n ],\n \"headers\": {}\n}\n", "schema":"" }, { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"endpoints\": [\n \"http:\/\/storage02.swiftdrive:6002\/d2\/617\/AUTH_dev\",\n \"http:\/\/storage01.swiftdrive:6002\/d8\/617\/AUTH_dev\",\n \"http:\/\/storage01.swiftdrive:6002\/d11\/617\/AUTH_dev\"\n ],\n \"headers\": {}\n}\n", "schema":"" }, { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"endpoints\": [\n \"http:\/\/storage01.swiftdrive.com:6008\/d8\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6008\/d2\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6006\/d3\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6008\/d5\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage01.swiftdrive.com:6007\/d7\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6007\/d4\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage01.swiftdrive.com:6006\/d6\/583\/AUTH_dev\/EC_cont1\/obj\"\n ],\n \"headers\": {\n \"X-Backend-Storage-Policy-Index\": \"2\"\n }\n}\n", "schema":"" }, { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"endpoints\": [\n \"http:\/\/storage01.swiftdrive.com:6008\/d8\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6008\/d2\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6006\/d3\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6008\/d5\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage01.swiftdrive.com:6007\/d7\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage02.swiftdrive.com:6007\/d4\/583\/AUTH_dev\/EC_cont1\/obj\",\n \"http:\/\/storage01.swiftdrive.com:6006\/d6\/583\/AUTH_dev\/EC_cont1\/obj\"\n ],\n \"headers\": {\n \"X-Backend-Storage-Policy-Index\": \"2\"\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v1/{account}{?limit,marker,end_marker,format,prefix,delimiter}", "parameters":{ "account":{ "description":"\n The unique name for the account. An\n account is also known as the project or\n tenant.", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show account details and list containers", "description":"\n Shows details for a specified\n account and lists containers, sorted by name, in the\n account.\n \n The sort order for the name is based on a binary comparison, a\n single built-in collating sequence that compares string data\n by using the SQLite memcmp() function,\n regardless of text encoding. See Collating Sequences.\n \n This operation does not accept a request\n body.\n Example requests and responses:\n \n \n Show account details and list containers, and ask for\n a JSON response:\n \n \n curl -i $publicURL?format=json -X GET -H \"X-Auth-Token: $token\"\n \n \n See the example response below.\n \n \n \n List containers and ask for an XML response:\n curl -i $publicURL?format=xml -X GET\n -H \"X-Auth-Token:\n $token\"See the example\n response\n below.\n The response body returns a list of containers. The\n default response (text\/plain) returns one\n container per line.\n If you use query parameters to page through a long\n list of containers, you have reached the end of the\n list if the number of items in the returned list is\n less than the request limit value. The\n list contains more items if the number of items in the\n returned list equals the limit\n value.\n When asking for a list of containers and there\n are none, the response behavior changes depending on\n whether the request format is text, JSON, or XML.\n For a text response, you get a\n 204, because there is no\n content. However, for a JSON or XML response, you get\n a 200 with content indicating\n an empty array.\n If the request succeeds, the operation returns one\n of these status codes:\n \n 200.\n Success. The response body lists the\n containers.\n 204.\n Success. The response body shows no\n containers. Either the account has no\n containers or you are paging through a long\n list of names by using the\n marker, limit, or\n end_marker query parameters,\n and you have reached the end of the\n list.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"HTTP\/1.1 200 OK\nContent-Length: 96\nX-Account-Object-Count: 1\nX-Timestamp: 1389453423.35964\nX-Account-Meta-Subject: Literature\nX-Account-Bytes-Used: 14\nX-Account-Container-Count: 2\nContent-Type: application\/json; charset=utf-8\nAccept-Ranges: bytes\nX-Trans-Id: tx274a77a8975c4a66aeb24-0052d95365\nDate: Fri, 17 Jan 2014 15:59:33 GMT", "schema":"" }, { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"[\n {\n \"count\": 0,\n \"bytes\": 0,\n \"name\": \"janeausten\"\n },\n {\n \"count\": 1,\n \"bytes\": 14,\n \"name\": \"marktwain\"\n }\n]", "schema":"" }, { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"HTTP\/1.1 200 OK\nContent-Length: 262\nX-Account-Object-Count: 1\nX-Timestamp: 1389453423.35964\nX-Account-Meta-Subject: Literature\nX-Account-Bytes-Used: 14\nX-Account-Container-Count: 2\nContent-Type: application\/xml; charset=utf-8\nAccept-Ranges: bytes\nX-Trans-Id: tx69f60bc9f7634a01988e6-0052d9544b\nDate: Fri, 17 Jan 2014 16:03:23 GMT", "schema":"" }, { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<account name=\"my_account\">\n <container>\n <name>janeausten<\/name>\n <count>0<\/count>\n <bytes>0<\/bytes>\n <\/container>\n <container>\n <name>marktwain<\/name>\n <count>1<\/count>\n <bytes>14<\/bytes>\n <\/container>\n<\/account>\n", "schema":"" } ] } ] }, { "method":"HEAD", "name":"Show account metadata", "description":"\n Shows metadata for a specified\n account.\n Metadata for the account includes:\n \n Number of containers\n Number of objects\n Total number of bytes that are stored\n in Object Storage for the\n account\n \n Because the storage system can store large amounts\n of data, take care when you represent the total bytes\n response as an integer; when possible, convert it to a\n 64-bit unsigned integer if your platform supports that\n primitive type.\n This operation does not accept a request\n body.\n Do not include metadata headers in this\n request.\n Show account metadata\n request:curl -i $publicURL -X\n HEAD -H \"X-Auth-Token: $token\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nX-Account-Object-Count: 1\nX-Account-Meta-Book: MobyDick\nX-Timestamp: 1389453423.35964\nX-Account-Bytes-Used: 14\nX-Account-Container-Count: 2\nContent-Type: text\/plain; charset=utf-8\nAccept-Ranges: bytes\nX-Trans-Id: txafb3504870144b8ca40f7-0052d955d4\nDate: Fri, 17 Jan 2014 16:09:56 GMT\n If the account or authentication token is not valid,\n the operation returns the 401\n Unauthorized error code.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"POST", "name":"Create, update, or delete account metadata", "description":"\n Creates, updates, or deletes\n account metadata.\n To create, update, or delete metadata, use the\n X-Account-Meta-{name} header, where\n {name} is the name of the metadata\n item.\n Subsequent requests for the same key and value pair\n overwrite the previous value.\n To delete a metadata header, send an empty value for\n that particular header, such as for the\n X-Account-Meta-Book header. If the\n tool you use to communicate with Object Storage, such\n as an older version of cURL, does not support empty\n headers, send the\n X-Remove-Account-Meta-{name}:\n arbitrary value header.\n For example, X-Remove-Account-Meta-Book:\n x. The operation ignores the arbitrary\n value.\n If the container already has other custom metadata\n items, a request to create, update, or delete metadata\n does not affect those items.\n This operation does not accept a request\n body.\n Example requests and responses:\n Create account\n metadata:curl -i\n $publicURL -X POST -H \"X-Auth-Token:\n $token\" -H \"X-Account-Meta-Book: MobyDick\"\n -H \"X-Account-Meta-Subject:\n Literature\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx8c2dd6aee35442a4a5646-0052d954fb\nDate: Fri, 17 Jan 2014 16:06:19 GMT\n Update account\n metadata:curl -i\n $publicURL -X POST -H \"X-Auth-Token:\n $token\" -H \"X-Account-Meta-Subject:\n AmericanLiterature\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx1439b96137364ab581156-0052d95532\nDate: Fri, 17 Jan 2014 16:07:14 GMT\n Delete account\n metadata:curl -i\n $publicURL -X POST -H \"X-Auth-Token:\n $token\" -H \"X-Remove-Account-Meta-Subject:\n x\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx411cf57701424da99948a-0052d9556f\nDate: Fri, 17 Jan 2014 16:08:15 GMT\n \n If the request succeeds, the operation returns the\n 204 status code.\n To confirm your changes, issue a show account\n metadata request.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v1/{account}/{container}{?limit,marker,end_marker,prefix,format,delimiter,path}", "parameters":{ "account":{ "description":"\n The unique name for the account. An\n account is also known as the project or\n tenant.", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] }, "container":{ "description":"\n \n The unique name for the container.\n \n \n The container name must be from 1 to 256\n characters long and can start with any character\n and contain any pattern. Character set must be\n UTF-8. The container name cannot contain a slash\n (\/) character because this character\n delimits the container\n and object name. For example,\n \/account\/container\/object.\n \n", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show container details and list objects", "description":"\n Shows details for a specified\n container and lists objects, sorted by name, in the\n container.\n Specify query parameters in the request to filter\n the list and return a subset of object names. Omit\n query parameters to return the complete list of object\n names that are stored in the container, up to 10,000\n names. The 10,000 maximum value is configurable. To\n view the value for the cluster, issue a GET\n \/info request.\n Example requests and responses:\n \n Show container details for and list objects\n in the marktwain container, and\n ask for a JSON\n response:curl -i\n $publicURL\/marktwain?format=json -X GET -H\n \"X-Auth-Token: $token\"\n \n Show container details for and list objects\n in the marktwain container, and\n ask for an XML\n response:curl -i\n $publicURL\/marktwain?format=xml -X GET -H\n \"X-Auth-Token: $token\"\n \n If you use query parameters to page through a long\n list of objects, you have reached the end of the list\n if the number of items in the returned list is less\n than the request limit value. The list\n contains more items if the number of items in the\n returned list equals the limit\n value.\n If the request succeeds, the operation returns one\n of these status codes:\n 200.\n Success. The response body lists the\n objects.\n 204.\n Success. The response body shows no objects.\n Either the container has no objects or you are\n paging through a long list of names by using\n the marker, limit,\n or end_marker query parameters,\n and you have reached the end of the\n list.\n If the container does not exist, the\n 404\n Not Found error code is\n returned.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"HTTP\/1.1 200 OK\nContent-Length: 341\nX-Container-Object-Count: 2\nAccept-Ranges: bytes\nX-Container-Meta-Book: TomSawyer\nX-Timestamp: 1389727543.65372\nX-Container-Bytes-Used: 26\nContent-Type: application\/json; charset=utf-8\nX-Trans-Id: tx26377fe5fab74869825d1-0052d6bdff\nDate: Wed, 15 Jan 2014 16:57:35 GMT", "schema":"" }, { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"[\n {\n \"hash\": \"451e372e48e0f6b1114fa0724aa79fa1\",\n \"last_modified\": \"2014-01-15T16:41:49.390270\",\n \"bytes\": 14,\n \"name\": \"goodbye\",\n \"content_type\": \"application\/octet-stream\"\n },\n {\n \"hash\": \"ed076287532e86365e841e92bfc50d8c\",\n \"last_modified\": \"2014-01-15T16:37:43.427570\",\n \"bytes\": 12,\n \"name\": \"helloworld\",\n \"content_type\": \"application\/octet-stream\"\n }\n]", "schema":"" }, { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"HTTP\/1.1 200 OK\nContent-Length: 500\nX-Container-Object-Count: 2\nAccept-Ranges: bytes\nX-Container-Meta-Book: TomSawyer\nX-Timestamp: 1389727543.65372\nX-Container-Bytes-Used: 26\nContent-Type: application\/xml; charset=utf-8\nX-Trans-Id: txc75ea9a6e66f47d79e0c5-0052d6be76\nDate: Wed, 15 Jan 2014 16:59:35 GMT", "schema":"" }, { "name":"200 204", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<container name=\"marktwain\">\n <object>\n <name>goodbye<\/name>\n <hash>451e372e48e0f6b1114fa0724aa79fa1<\/hash>\n <bytes>14<\/bytes>\n <content_type>application\/octet-stream<\/content_type>\n <last_modified>2014-01-15T16:41:49.390270<\/last_modified>\n <\/object>\n <object>\n <name>helloworld<\/name>\n <hash>ed076287532e86365e841e92bfc50d8c<\/hash>\n <bytes>12<\/bytes>\n <content_type>application\/octet-stream<\/content_type>\n <last_modified>2014-01-15T16:37:43.427570<\/last_modified>\n <\/object>\n<\/container>\n", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Create container", "description":"\n Creates a container.\n \n You do not need to check whether a container already exists\n before issuing a PUT operation because the operation is\n idempotent: It creates a container or updates an existing\n container, as appropriate.\n \n Example requests and responses:\n Create a container with no metadata:\n curl -i $publicURL\/steven -X PUT -H\n \"Content-Length: 0\" -H \"X-Auth-Token:\n $token\"\n HTTP\/1.1 201 Created\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx7f6b7fa09bc2443a94df0-0052d58b56\nDate: Tue, 14 Jan 2014 19:09:10 GMT\n \n Create a container with\n metadata:curl -i\n $publicURL\/marktwain -X PUT -H\n \"X-Auth-Token: $token\" -H\n \"X-Container-Meta-Book:\n TomSawyer\"\n HTTP\/1.1 201 Created\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx06021f10fc8642b2901e7-0052d58f37\nDate: Tue, 14 Jan 2014 19:25:43 GMT\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete container", "description":"\n Deletes an empty container.\n This operation fails unless the container is empty.\n An empty container has no objects.\n Delete the steven\n container:curl -i\n $publicURL\/steven -X DELETE -H \"X-Auth-Token:\n $token\"\n If the container does not exist, the response\n is:\n HTTP\/1.1 404 Not Found\nContent-Length: 70\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx4d728126b17b43b598bf7-0052d81e34\nDate: Thu, 16 Jan 2014 18:00:20 GMT\n If the container exists and the deletion succeeds,\n the response is:\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: txf76c375ebece4df19c84c-0052d81f14\nDate: Thu, 16 Jan 2014 18:04:04 GMT\n If the container exists but is not empty, the\n response is:\n HTTP\/1.1 409 Conflict\nContent-Length: 95\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx7782dc6a97b94a46956b5-0052d81f6b\nDate: Thu, 16 Jan 2014 18:05:31 GMT\n\n<html><h1>Conflict<\/h1><p>There was a conflict when trying to complete your request.<\/p><\/html>\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"POST", "name":"Create, update, or delete container metadata", "description":"\n Creates, updates, or deletes custom\n metadata for a container.\n To create, update, or delete a custom metadata item,\n use the X-Container-Meta-{name} header,\n where {name} is the name of the metadata\n item.\n Subsequent requests for the same key and value pair\n overwrite the previous value.\n To delete container metadata, send an empty value\n for that header, such as for the\n X-Container-Meta-Book header. If the\n tool you use to communicate with Object Storage, such\n as an older version of cURL, does not support empty\n headers, send the\n X-Remove-Container-Meta-{name}:\n arbitrary value header.\n For example, X-Remove-Container-Meta-Book:\n x. The operation ignores the arbitrary\n value.\n If the container already has other custom metadata\n items, a request to create, update, or delete metadata\n does not affect those items.\n This operation does not accept a request\n body.\n Example requests and\n responses:Create\n container metadata:curl -i\n $publicURL\/marktwain -X POST -H\n \"X-Auth-Token: $token\" -H\n \"X-Container-Meta-Author: MarkTwain\" -H\n \"X-Container-Meta-Web-Directory-Type: text\/directory\" -H\n \"X-Container-Meta-Century:\n Nineteenth\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx05dbd434c651429193139-0052d82635\nDate: Thu, 16 Jan 2014 18:34:29 GMT\n Update container\n metadata:curl -i\n $publicURL\/marktwain -X POST -H\n \"X-Auth-Token: $token\" -H\n \"X-Container-Meta-Author:\n SamuelClemens\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: txe60c7314bf614bb39dfe4-0052d82653\nDate: Thu, 16 Jan 2014 18:34:59 GMT\n Delete container\n metadata:curl -i\n $publicURL\/marktwain -X POST -H\n \"X-Auth-Token: $token\" -H\n \"X-Remove-Container-Meta-Century:\n x\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx7997e18da2a34a9e84ceb-0052d826d0\nDate: Thu, 16 Jan 2014 18:37:04 GMT\n \n \n If the request succeeds, the operation returns the\n 204 status code.\n To confirm your changes, issue a show container\n metadata request.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"HEAD", "name":"Show container metadata", "description":"\n Shows container metadata, including\n the number of objects and the total bytes of all\n objects stored in the container.\n Show container metadata\n request:curl -i\n $publicURL\/marktwain -X HEAD -H \"X-Auth-Token:\n $token\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nX-Container-Object-Count: 1\nAccept-Ranges: bytes\nX-Container-Meta-Book: TomSawyer\nX-Timestamp: 1389727543.65372\nX-Container-Meta-Author: SamuelClemens\nX-Container-Bytes-Used: 14\nContent-Type: text\/plain; charset=utf-8\nX-Trans-Id: tx0287b982a268461b9ec14-0052d826e2\nDate: Thu, 16 Jan 2014 18:37:22 GMT\n If the request succeeds, the operation returns the\n 204 status code.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v1/{account}/{container}/{object}{?temp_url_sig,temp_url_expires,filename,multipart-manifest,multipart-manifest,temp_url_sig,temp_url_expires,filename,multipart-manifest,temp_url_sig,temp_url_expires,filename}", "parameters":{ "account":{ "description":"\n The unique name for the account. An\n account is also known as the project or\n tenant.", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] }, "container":{ "description":"\n \n The unique name for the container.\n \n \n The container name must be from 1 to 256\n characters long and can start with any character\n and contain any pattern. Character set must be\n UTF-8. The container name cannot contain a slash\n (\/) character because this character\n delimits the container\n and object name. For example,\n \/account\/container\/object.\n \n", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] }, "object":{ "description":"\n The unique name for the\n object.", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get object content and metadata", "description":"\n Downloads the object content and\n gets the object metadata.\n This operation returns the object metadata in the\n response headers and the object content in the\n response body.\n If this is a large object, the response body\n contains the concatenated content of the segment\n objects. To get the manifest instead of concatenated\n segment objects for a static large object, use the\n multipart-manifest query\n parameter.\n Example requests and responses:\n Show object details for the\n goodbye object in the\n marktwain container:\n curl -i $publicURL\/marktwain\/goodbye\n -X GET -H \"X-Auth-Token:\n $token\"\n HTTP\/1.1 200 OK\nContent-Length: 14\nAccept-Ranges: bytes\nLast-Modified: Wed, 15 Jan 2014 16:41:49 GMT\nEtag: 451e372e48e0f6b1114fa0724aa79fa1\nX-Timestamp: 1389804109.39027\nX-Object-Meta-Orig-Filename: goodbyeworld.txt\nContent-Type: application\/octet-stream\nX-Trans-Id: tx8145a190241f4cf6b05f5-0052d82a34\nDate: Thu, 16 Jan 2014 18:51:32 GMT\n\nGoodbye World!\n \n \n Show object details for the\n goodbye object, which does\n not exist, in the janeausten\n container:curl -i\n $publicURL\/janeausten\/goodbye -X GET -H\n \"X-Auth-Token: $token\"\n HTTP\/1.1 404 Not Found\nContent-Length: 70\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx073f7cbb850c4c99934b9-0052d82b04\nDate: Thu, 16 Jan 2014 18:55:00 GMT\n\n<html><h1>Not Found<\/h1><p>The resource could not be found.<\/p><\/html>\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Create or replace object", "description":"\n \n Creates an object with specified data content and metadata, or\n replaces an existing object with specified data content and\n metadata.\n \n \n The PUT operation always creates an object. If you use this\n operation on an existing object, you replace the existing\n object and metadata rather than modifying the object.\n Consequently, this operation returns a 201\n Created status code.\n \n If you use this operation to copy a manifest object,\n the new object is a normal object and not a copy of\n the manifest. Instead it is a concatenation of all the\n segment objects. This means that you cannot copy\n objects larger than 5 GB.\n Example requests and responses:\n \n Create object:\n curl -i\n $publicURL\/janeausten\/helloworld.txt -X\n PUT -H \"Content-Length: 1\" -H\n \"Content-Type: text\/html; charset=UTF-8\"\n -H \"X-Auth-Token: $token\"\n HTTP\/1.1 201 Created\nLast-Modified: Fri, 17 Jan 2014 17:28:35 GMT\nContent-Length: 116\nEtag: d41d8cd98f00b204e9800998ecf8427e\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx4d5e4f06d357462bb732f-0052d96843\nDate: Fri, 17 Jan 2014 17:28:35 GMT\n Replace object:curl\n -i $publicURL\/janeausten\/helloworld -X PUT\n -H \"Content-Length: 0\" -H \"X-Auth-Token:\n $token\"\n HTTP\/1.1 201 Created\nLast-Modified: Fri, 17 Jan 2014 17:28:35 GMT\nContent-Length: 116\nEtag: d41d8cd98f00b204e9800998ecf8427e\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx4d5e4f06d357462bb732f-0052d96843\nDate: Fri, 17 Jan 2014 17:28:35 GMT\n \n The 201 Created status code indicates a\n successful write.\n If the request times out, the operation returns the\n 408 Request Timeout error\n code.\n The 411 Length Required error code\n indicates a missing Transfer-Encoding or\n Content-Length request header.\n If the MD5 checksum of the data that is written to\n the object store does not match the optional\n ETag value, the operation returns the\n 422 Unprocessable Entity error\n code.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"408", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"408", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"411", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"411", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"422", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"422", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"COPY", "name":"Copy object", "description":"\n \n Copies an object to another object in the object store.\n \n \n You can copy an object to a new object with the same name.\n Copying to the same name is an alternative to using POST to\n add metadata to an object. With POST, you must specify all\n the metadata. With COPY, you can add additional metadata to\n the object.\n \n \n With COPY, you can set the X-Fresh-Metadata\n header to True to copy the object without any\n existing metadata.\n \n \n Alternatively, you can use PUT with the X-Copy-From\n request header to accomplish the same operation as\n the COPY object operation.\n \n \n The PUT operation always creates an object. If you use this\n operation on an existing object, you replace the existing\n object and metadata rather than modifying the object.\n Consequently, this operation returns a 201\n Created success node.\n \n \n If you use this operation to copy a manifest object, the new\n object is a normal object and not a copy of the manifest.\n Instead it is a concatenation of all the segment objects. This\n means that you cannot copy objects larger than 5 GB in size.\n All metadata is preserved during the object copy. If you\n specify metadata on the request to copy the object, either\n PUT or COPY, the metadata overwrites any conflicting keys\n on the target (new) object.\n \n Example requests and responses:\n \n Copy the goodbye object\n from the marktwain container to\n the janeausten container:\n curl -i $publicURL\/marktwain\/goodbye\n -X COPY -H \"X-Auth-Token: $token\" -H\n \"Destination: janeausten\/goodbye\"\n HTTP\/1.1 201 Created\nContent-Length: 0\nX-Copied-From-Last-Modified: Thu, 16 Jan 2014 21:19:45 GMT\nX-Copied-From: marktwain\/goodbye\nLast-Modified: Fri, 17 Jan 2014 18:22:57 GMT\nEtag: 451e372e48e0f6b1114fa0724aa79fa1\nContent-Type: text\/html; charset=UTF-8\nX-Object-Meta-Movie: AmericanPie\nX-Trans-Id: txdcb481ad49d24e9a81107-0052d97501\nDate: Fri, 17 Jan 2014 18:22:57 GMT\n Alternatively, you can use PUT to\n copy the goodbye object from the\n marktwain container to the\n janeausten container. This\n request requires a Content-Length\n header even if it is set to zero (0).\n curl -i $publicURL\/janeausten\/goodbye\n -X PUT -H \"X-Auth-Token: $token\" -H\n \"X-Copy-From: \/marktwain\/goodbye\" -H\n \"Content-Length: 0\"\n HTTP\/1.1 201 Created\nContent-Length: 0\nX-Copied-From-Last-Modified: Thu, 16 Jan 2014 21:19:45 GMT\nX-Copied-From: marktwain\/goodbye\nLast-Modified: Fri, 17 Jan 2014 18:22:57 GMT\nEtag: 451e372e48e0f6b1114fa0724aa79fa1\nContent-Type: text\/html; charset=UTF-8\nX-Object-Meta-Movie: AmericanPie\nX-Trans-Id: txdcb481ad49d24e9a81107-0052d97501\nDate: Fri, 17 Jan 2014 18:22:57 GMT\n \n When several replicas exist, the system copies\n from the most recent replica. That is, the COPY\n operation behaves as though the\n X-Newest header is in the\n request.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete object", "description":"\n Permanently deletes an object from\n the object store.\n You can use the COPY method to copy the object to\n a new location. Then, use the DELETE method to\n delete the original object.\n Object deletion occurs immediately at request time.\n Any subsequent GET, HEAD, POST, or DELETE\n operations return a 404 Not Found error\n code.\n For static large object manifests, you can add the\n ?multipart-manifest=delete query\n parameter. This operation deletes the segment objects\n and if all deletions succeed, this operation deletes\n the manifest object.\n Example request and response:\n Delete the\n helloworld object from the\n marktwain container:\n curl -i\n $publicURL\/marktwain\/helloworld -X DELETE\n -H \"X-Auth-Token: $token\"\n HTTP\/1.1 204 No Content\nContent-Length: 0\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx36c7606fcd1843f59167c-0052d6fdac\nDate: Wed, 15 Jan 2014 21:29:16 GMT\n Normally the DELETE operation does not return a\n response body. However, with the\n multipart-manifest=delete query\n parameter, the response body contains a list of\n manifest and segment objects and the status of their\n delete operations.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"HEAD", "name":"Show object metadata", "description":"\n Shows object metadata.\n If the Content-Length response header\n is non-zero, the example cURL command stalls after it\n prints the response headers because it is waiting for\n a response body. However, the Object Storage system\n does not return a response body for the HEAD\n operation.\n Example requests and\n responses:Show\n object metadata:curl -i\n $publicURL\/marktwain\/goodbye -X HEAD -H\n \"X-Auth-Token: $token\"\n HTTP\/1.1 200 OK\nContent-Length: 14\nAccept-Ranges: bytes\nLast-Modified: Thu, 16 Jan 2014 21:12:31 GMT\nEtag: 451e372e48e0f6b1114fa0724aa79fa1\nX-Timestamp: 1389906751.73463\nX-Object-Meta-Book: GoodbyeColumbus\nContent-Type: application\/octet-stream\nX-Trans-Id: tx37ea34dcd1ed48ca9bc7d-0052d84b6f\nDate: Thu, 16 Jan 2014 21:13:19 GMT\n \n If the request succeeds, the operation returns the\n 204 status code.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"POST", "name":"Create or update object metadata", "description":"\n Creates or updates object\n metadata.\n To create or update custom metadata, use the\n X-Object-Meta-{name} header, where\n {name} is the name of the metadata\n item.\n In addition to the custom metadata, you can also\n update these system metadata items:\n Content-Type\n Content-Encoding\n Content-Disposition\n X-Delete-At. However you cannot update\n other system metadata such as\n Content-Length or\n Last-Modified.\n You can use COPY as an alternate to the POST\n operation by copying to the same object. With the\n POST operation you must specify all metadata items,\n whereas with the COPY operation, you need to specify\n only changed or additional items.\n All metadata is preserved during the object copy. If\n you specify metadata on the request to copy the\n object, either PUT or COPY, the metadata\n overwrites any conflicting keys on the target (new)\n object.\n A POST request deletes any existing custom\n metadata that you added with a previous PUT or\n POST request. Consequently, you must specify all\n custom metadata in the request. However, system\n metadata is unchanged by the POST request unless you\n explicitly supply it in a request header.\n You can also set the X-Delete-At or\n X-Delete-After header to define when\n to expire the object.\n \n When used as described in this section, the POST operation\n creates or replaces metadata. This form of the operation has\n no request body.\n \n \n You can also use the form POST feature to upload objects.\n \n \n Example requests and responses:\n \n \n \n \n Create object metadata:\n \n \n curl -i $publicURL\/marktwain\/goodbye -X POST -H \"X\n-Auth-Token: $token\" -H \"X-Object-Meta-Book: GoodbyeColumbus\"\n \n \n HTTP\/1.1 202 Accepted\nContent-Length: 76\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: txb5fb5c91ba1f4f37bb648-0052d84b3f\nDate: Thu, 16 Jan 2014 21:12:31 GMT\n\n<html><h1>Accepted<\/h1><p>The request is accepted for processing.<\/p><\/html>\n \n \n \n \n Update object metadata:\n \n curl -i $publicURL\/marktwain\/goodbye -X POST -H \"X-Auth-Token: $token\" H \"X-Object-Meta-Book: GoodbyeOldFriend\"\n \n HTTP\/1.1 202 Accepted\nContent-Length: 76\nContent-Type: text\/html; charset=UTF-8\nX-Trans-Id: tx5ec7ab81cdb34ced887c8-0052d84ca4\nDate: Thu, 16 Jan 2014 21:18:28 GMT\n\n<html><h1>Accepted<\/h1><p>The request is accepted for processing.<\/p><\/html>\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/info{?swiftinfo_sig,swiftinfo_expires}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List activated capabilities", "description":"\n \n Lists the activated capabilities for this version of the\n OpenStack Object Storage API.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"swift\": {\n \"version\": \"1.11.0\"\n },\n \"staticweb\": {},\n \"tempurl\": {}\n}\n", "schema":"" }, { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"swift\": {\n \"version\": \"1.11.0\"\n },\n \"staticweb\": {},\n \"tempurl\": {}\n}\n", "schema":"" } ] } ] } ] } ] } ] }