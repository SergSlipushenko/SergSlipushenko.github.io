{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/namespace", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition namespace schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition namespace entity. (Since API v2.1.)\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"additionalProperties\": false,\n \"definitions\": {\n \"positiveInteger\": {\n \"minimum\": 0,\n \"type\": \"integer\"\n },\n \"positiveIntegerDefault0\": {\n \"allOf\": [\n {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n {\n \"default\": 0\n }\n ]\n },\n \"property\": {\n \"additionalProperties\": {\n \"properties\": {\n \"additionalItems\": {\n \"type\": \"boolean\"\n },\n \"default\": {},\n \"description\": {\n \"type\": \"string\"\n },\n \"enum\": {\n \"type\": \"array\"\n },\n \"items\": {\n \"properties\": {\n \"enum\": {\n \"type\": \"array\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"maxItems\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maxLength\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maximum\": {\n \"type\": \"number\"\n },\n \"minItems\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minLength\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minimum\": {\n \"type\": \"number\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"pattern\": {\n \"format\": \"regex\",\n \"type\": \"string\"\n },\n \"readonly\": {\n \"type\": \"boolean\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n },\n \"uniqueItems\": {\n \"default\": false,\n \"type\": \"boolean\"\n }\n },\n \"required\": [\n \"title\",\n \"type\"\n ],\n \"type\": \"object\"\n },\n \"type\": \"object\"\n },\n \"stringArray\": {\n \"items\": {\n \"type\": \"string\"\n },\n \"type\": \"array\",\n \"uniqueItems\": true\n }\n },\n \"name\": \"namespace\",\n \"properties\": {\n \"created_at\": {\n \"description\": \"Date and time of namespace creation (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"description\": {\n \"description\": \"Provides a user friendly description of the namespace.\",\n \"maxLength\": 500,\n \"type\": \"string\"\n },\n \"display_name\": {\n \"description\": \"The user friendly name for the namespace. Used by UI if available.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"namespace\": {\n \"description\": \"The unique namespace text.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"objects\": {\n \"items\": {\n \"properties\": {\n \"description\": {\n \"type\": \"string\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"properties\": {\n \"$ref\": \"#\/definitions\/property\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n }\n },\n \"type\": \"object\"\n },\n \"type\": \"array\"\n },\n \"owner\": {\n \"description\": \"Owner of the namespace.\",\n \"maxLength\": 255,\n \"type\": \"string\"\n },\n \"properties\": {\n \"$ref\": \"#\/definitions\/property\"\n },\n \"protected\": {\n \"description\": \"If true, namespace will not be deletable.\",\n \"type\": \"boolean\"\n },\n \"resource_type_associations\": {\n \"items\": {\n \"properties\": {\n \"name\": {\n \"type\": \"string\"\n },\n \"prefix\": {\n \"type\": \"string\"\n },\n \"properties_target\": {\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"type\": \"array\"\n },\n \"schema\": {\n \"type\": \"string\"\n },\n \"self\": {\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"description\": \"Date and time of the last namespace modification (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"visibility\": {\n \"description\": \"Scope of namespace accessibility.\",\n \"enum\": [\n \"public\",\n \"private\"\n ],\n \"type\": \"string\"\n }\n },\n \"required\": [\n \"namespace\"\n ]\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/namespaces", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition namespaces schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition namespaces entity. (Since API v2.1.)\n \n \n A namespaces entity is a container for namespace entities.\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"definitions\": {\n \"positiveInteger\": {\n \"minimum\": 0,\n \"type\": \"integer\"\n },\n \"positiveIntegerDefault0\": {\n \"allOf\": [\n {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n {\n \"default\": 0\n }\n ]\n },\n \"property\": {\n \"additionalProperties\": {\n \"properties\": {\n \"additionalItems\": {\n \"type\": \"boolean\"\n },\n \"default\": {},\n \"description\": {\n \"type\": \"string\"\n },\n \"enum\": {\n \"type\": \"array\"\n },\n \"items\": {\n \"properties\": {\n \"enum\": {\n \"type\": \"array\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"maxItems\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maxLength\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maximum\": {\n \"type\": \"number\"\n },\n \"minItems\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minLength\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minimum\": {\n \"type\": \"number\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"pattern\": {\n \"format\": \"regex\",\n \"type\": \"string\"\n },\n \"readonly\": {\n \"type\": \"boolean\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n },\n \"uniqueItems\": {\n \"default\": false,\n \"type\": \"boolean\"\n }\n },\n \"required\": [\n \"title\",\n \"type\"\n ],\n \"type\": \"object\"\n },\n \"type\": \"object\"\n },\n \"stringArray\": {\n \"items\": {\n \"type\": \"string\"\n },\n \"type\": \"array\",\n \"uniqueItems\": true\n }\n },\n \"links\": [\n {\n \"href\": \"{first}\",\n \"rel\": \"first\"\n },\n {\n \"href\": \"{next}\",\n \"rel\": \"next\"\n },\n {\n \"href\": \"{schema}\",\n \"rel\": \"describedby\"\n }\n ],\n \"name\": \"namespaces\",\n \"properties\": {\n \"first\": {\n \"type\": \"string\"\n },\n \"namespaces\": {\n \"items\": {\n \"additionalProperties\": false,\n \"name\": \"namespace\",\n \"properties\": {\n \"created_at\": {\n \"description\": \"Date and time of namespace creation (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"description\": {\n \"description\": \"Provides a user friendly description of the namespace.\",\n \"maxLength\": 500,\n \"type\": \"string\"\n },\n \"display_name\": {\n \"description\": \"The user friendly name for the namespace. Used by UI if available.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"namespace\": {\n \"description\": \"The unique namespace text.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"objects\": {\n \"items\": {\n \"properties\": {\n \"description\": {\n \"type\": \"string\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"properties\": {\n \"$ref\": \"#\/definitions\/property\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n }\n },\n \"type\": \"object\"\n },\n \"type\": \"array\"\n },\n \"owner\": {\n \"description\": \"Owner of the namespace.\",\n \"maxLength\": 255,\n \"type\": \"string\"\n },\n \"properties\": {\n \"$ref\": \"#\/definitions\/property\"\n },\n \"protected\": {\n \"description\": \"If true, namespace will not be deletable.\",\n \"type\": \"boolean\"\n },\n \"resource_type_associations\": {\n \"items\": {\n \"properties\": {\n \"name\": {\n \"type\": \"string\"\n },\n \"prefix\": {\n \"type\": \"string\"\n },\n \"properties_target\": {\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"type\": \"array\"\n },\n \"schema\": {\n \"type\": \"string\"\n },\n \"self\": {\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"description\": \"Date and time of the last namespace modification (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"visibility\": {\n \"description\": \"Scope of namespace accessibility.\",\n \"enum\": [\n \"public\",\n \"private\"\n ],\n \"type\": \"string\"\n }\n },\n \"required\": [\n \"namespace\"\n ]\n },\n \"type\": \"array\"\n },\n \"next\": {\n \"type\": \"string\"\n },\n \"schema\": {\n \"type\": \"string\"\n }\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/object", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition object schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition object entity. (Since API v2.1.)\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"additionalProperties\": false,\n \"definitions\": {\n \"positiveInteger\": {\n \"minimum\": 0,\n \"type\": \"integer\"\n },\n \"positiveIntegerDefault0\": {\n \"allOf\": [\n {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n {\n \"default\": 0\n }\n ]\n },\n \"property\": {\n \"additionalProperties\": {\n \"properties\": {\n \"additionalItems\": {\n \"type\": \"boolean\"\n },\n \"default\": {},\n \"description\": {\n \"type\": \"string\"\n },\n \"enum\": {\n \"type\": \"array\"\n },\n \"items\": {\n \"properties\": {\n \"enum\": {\n \"type\": \"array\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"maxItems\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maxLength\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maximum\": {\n \"type\": \"number\"\n },\n \"minItems\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minLength\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minimum\": {\n \"type\": \"number\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"pattern\": {\n \"format\": \"regex\",\n \"type\": \"string\"\n },\n \"readonly\": {\n \"type\": \"boolean\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n },\n \"uniqueItems\": {\n \"default\": false,\n \"type\": \"boolean\"\n }\n },\n \"required\": [\n \"title\",\n \"type\"\n ],\n \"type\": \"object\"\n },\n \"type\": \"object\"\n },\n \"stringArray\": {\n \"items\": {\n \"type\": \"string\"\n },\n \"type\": \"array\",\n \"uniqueItems\": true\n }\n },\n \"name\": \"object\",\n \"properties\": {\n \"created_at\": {\n \"description\": \"Date and time of object creation (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"description\": {\n \"type\": \"string\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"properties\": {\n \"$ref\": \"#\/definitions\/property\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"schema\": {\n \"type\": \"string\"\n },\n \"self\": {\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"description\": \"Date and time of the last object modification (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n }\n },\n \"required\": [\n \"name\"\n ]\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/objects", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition objects schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition objects entity. (Since API v2.1.)\n \n \n An objects entity is a container for object entities.\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"definitions\": {\n \"positiveInteger\": {\n \"minimum\": 0,\n \"type\": \"integer\"\n },\n \"positiveIntegerDefault0\": {\n \"allOf\": [\n {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n {\n \"default\": 0\n }\n ]\n },\n \"property\": {\n \"additionalProperties\": {\n \"properties\": {\n \"additionalItems\": {\n \"type\": \"boolean\"\n },\n \"default\": {},\n \"description\": {\n \"type\": \"string\"\n },\n \"enum\": {\n \"type\": \"array\"\n },\n \"items\": {\n \"properties\": {\n \"enum\": {\n \"type\": \"array\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"maxItems\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maxLength\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maximum\": {\n \"type\": \"number\"\n },\n \"minItems\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minLength\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minimum\": {\n \"type\": \"number\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"pattern\": {\n \"format\": \"regex\",\n \"type\": \"string\"\n },\n \"readonly\": {\n \"type\": \"boolean\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n },\n \"uniqueItems\": {\n \"default\": false,\n \"type\": \"boolean\"\n }\n },\n \"required\": [\n \"title\",\n \"type\"\n ],\n \"type\": \"object\"\n },\n \"type\": \"object\"\n },\n \"stringArray\": {\n \"items\": {\n \"type\": \"string\"\n },\n \"type\": \"array\",\n \"uniqueItems\": true\n }\n },\n \"links\": [\n {\n \"href\": \"{first}\",\n \"rel\": \"first\"\n },\n {\n \"href\": \"{next}\",\n \"rel\": \"next\"\n },\n {\n \"href\": \"{schema}\",\n \"rel\": \"describedby\"\n }\n ],\n \"name\": \"objects\",\n \"properties\": {\n \"first\": {\n \"type\": \"string\"\n },\n \"next\": {\n \"type\": \"string\"\n },\n \"objects\": {\n \"items\": {\n \"additionalProperties\": false,\n \"name\": \"object\",\n \"properties\": {\n \"created_at\": {\n \"description\": \"Date and time of object creation (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"description\": {\n \"type\": \"string\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"properties\": {\n \"$ref\": \"#\/definitions\/property\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"schema\": {\n \"type\": \"string\"\n },\n \"self\": {\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"description\": \"Date and time of the last object modification (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n }\n },\n \"required\": [\n \"name\"\n ]\n },\n \"type\": \"array\"\n },\n \"schema\": {\n \"type\": \"string\"\n }\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/property", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition property schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition property entity. (Since API v2.1.)\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"additionalProperties\": false,\n \"definitions\": {\n \"positiveInteger\": {\n \"minimum\": 0,\n \"type\": \"integer\"\n },\n \"positiveIntegerDefault0\": {\n \"allOf\": [\n {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n {\n \"default\": 0\n }\n ]\n },\n \"stringArray\": {\n \"items\": {\n \"type\": \"string\"\n },\n \"minItems\": 1,\n \"type\": \"array\",\n \"uniqueItems\": true\n }\n },\n \"name\": \"property\",\n \"properties\": {\n \"additionalItems\": {\n \"type\": \"boolean\"\n },\n \"default\": {},\n \"description\": {\n \"type\": \"string\"\n },\n \"enum\": {\n \"type\": \"array\"\n },\n \"items\": {\n \"properties\": {\n \"enum\": {\n \"type\": \"array\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"maxItems\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maxLength\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maximum\": {\n \"type\": \"number\"\n },\n \"minItems\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minLength\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minimum\": {\n \"type\": \"number\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"pattern\": {\n \"format\": \"regex\",\n \"type\": \"string\"\n },\n \"readonly\": {\n \"type\": \"boolean\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n },\n \"uniqueItems\": {\n \"default\": false,\n \"type\": \"boolean\"\n }\n },\n \"required\": [\n \"type\",\n \"title\",\n \"name\"\n ]\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/properties", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition properties schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition properties entity. (Since API v2.1.)\n \n \n A properties entity is a container for property entities.\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"definitions\": {\n \"positiveInteger\": {\n \"minimum\": 0,\n \"type\": \"integer\"\n },\n \"positiveIntegerDefault0\": {\n \"allOf\": [\n {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n {\n \"default\": 0\n }\n ]\n },\n \"stringArray\": {\n \"items\": {\n \"type\": \"string\"\n },\n \"minItems\": 1,\n \"type\": \"array\",\n \"uniqueItems\": true\n }\n },\n \"links\": [\n {\n \"href\": \"{first}\",\n \"rel\": \"first\"\n },\n {\n \"href\": \"{next}\",\n \"rel\": \"next\"\n },\n {\n \"href\": \"{schema}\",\n \"rel\": \"describedby\"\n }\n ],\n \"name\": \"properties\",\n \"properties\": {\n \"first\": {\n \"type\": \"string\"\n },\n \"next\": {\n \"type\": \"string\"\n },\n \"properties\": {\n \"additionalProperties\": {\n \"additionalProperties\": false,\n \"name\": \"property\",\n \"properties\": {\n \"additionalItems\": {\n \"type\": \"boolean\"\n },\n \"default\": {},\n \"description\": {\n \"type\": \"string\"\n },\n \"enum\": {\n \"type\": \"array\"\n },\n \"items\": {\n \"properties\": {\n \"enum\": {\n \"type\": \"array\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n }\n },\n \"type\": \"object\"\n },\n \"maxItems\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maxLength\": {\n \"$ref\": \"#\/definitions\/positiveInteger\"\n },\n \"maximum\": {\n \"type\": \"number\"\n },\n \"minItems\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minLength\": {\n \"$ref\": \"#\/definitions\/positiveIntegerDefault0\"\n },\n \"minimum\": {\n \"type\": \"number\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"pattern\": {\n \"format\": \"regex\",\n \"type\": \"string\"\n },\n \"readonly\": {\n \"type\": \"boolean\"\n },\n \"required\": {\n \"$ref\": \"#\/definitions\/stringArray\"\n },\n \"title\": {\n \"type\": \"string\"\n },\n \"type\": {\n \"enum\": [\n \"array\",\n \"boolean\",\n \"integer\",\n \"number\",\n \"object\",\n \"string\",\n null\n ],\n \"type\": \"string\"\n },\n \"uniqueItems\": {\n \"default\": false,\n \"type\": \"boolean\"\n }\n },\n \"required\": [\n \"type\",\n \"title\"\n ]\n },\n \"type\": \"object\"\n },\n \"schema\": {\n \"type\": \"string\"\n }\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/tag", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition tag schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition tag entity. (Since API v2.1.)\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"additionalProperties\": false,\n \"required\": [\n \"name\"\n ],\n \"name\": \"tag\",\n \"properties\": {\n \"created_at\": {\n \"type\": \"string\",\n \"description\": \"Date and time of tag creation (READ-ONLY)\",\n \"format\": \"date-time\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"type\": \"string\",\n \"description\": \"Date and time of the last tag modification (READ-ONLY)\",\n \"format\": \"date-time\"\n }\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/tags", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition tags schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition tags entity. (Since API v2.1.)\n \n \n A tags entity is a container for tag entities.\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"name\": \"tags\",\n \"links\": [\n {\n \"href\": \"{first}\",\n \"rel\": \"first\"\n },\n {\n \"href\": \"{next}\",\n \"rel\": \"next\"\n },\n {\n \"href\": \"{schema}\",\n \"rel\": \"describedby\"\n }\n ],\n \"properties\": {\n \"next\": {\n \"type\": \"string\"\n },\n \"schema\": {\n \"type\": \"string\"\n },\n \"first\": {\n \"type\": \"string\"\n },\n \"tags\": {\n \"items\": {\n \"additionalProperties\": false,\n \"required\": [\n \"name\"\n ],\n \"name\": \"tag\",\n \"properties\": {\n \"created_at\": {\n \"type\": \"string\",\n \"description\": \"Date and time of tag creation (READ-ONLY)\",\n \"format\": \"date-time\"\n },\n \"name\": {\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"type\": \"string\",\n \"description\": \"Date and time of the last tag modification (READ-ONLY)\",\n \"format\": \"date-time\"\n }\n }\n },\n \"type\": \"array\"\n }\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/resource_type", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition namespace resource type association schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition namespace resource type association entity.\n (Since API v2.1.)\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"additionalProperties\": false,\n \"name\": \"resource_type_association\",\n \"properties\": {\n \"created_at\": {\n \"description\": \"Date and time of resource type association (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"name\": {\n \"description\": \"Resource type names should be aligned with Heat resource types whenever possible: http:\/\/docs.openstack.org\/developer\/heat\/template_guide\/openstack.html\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"prefix\": {\n \"description\": \"Specifies the prefix to use for the given resource type. Any properties in the namespace should be prefixed with this prefix when being applied to the specified resource type. Must include prefix separator (e.g. a colon :). It is important to note that the same base property key can require different prefixes depending on the target resource type. For example: The desired virtual CPU topology can be set on both images and flavors via metadata. The keys have different prefixes on images than on flavors On flavors keys are prefixed with 'hw:', but on images the keys are prefixed with 'hw_'.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"properties_target\": {\n \"description\": \"Some resource types allow more than one key \/ value pair per instance. For example, Cinder allows user and image metadata on volumes. Only the image properties metadata is evaluated by Nova (scheduling or drivers). This property allows a namespace target to remove the ambiguity.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"description\": \"Date and time of the last resource type association modification (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n }\n },\n \"required\": [\n \"name\"\n ]\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/schemas/metadefs/resource_types", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get metadata definition namespace resource type associations schema", "description":"\n \n Gets a JSON schema document that represents a metadata\n definition namespace resource type associations entity.\n (Since API v2.1.)\n \n \n A resource type associations entity is a container for\n resource type association entities.\n \n \n The following schema document is an example. The authoritative\n response is the actual response to the API call.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"links\": [\n {\n \"href\": \"{first}\",\n \"rel\": \"first\"\n },\n {\n \"href\": \"{next}\",\n \"rel\": \"next\"\n },\n {\n \"href\": \"{schema}\",\n \"rel\": \"describedby\"\n }\n ],\n \"name\": \"resource_type_associations\",\n \"properties\": {\n \"first\": {\n \"type\": \"string\"\n },\n \"next\": {\n \"type\": \"string\"\n },\n \"resource_type_associations\": {\n \"items\": {\n \"additionalProperties\": false,\n \"name\": \"resource_type_association\",\n \"properties\": {\n \"created_at\": {\n \"description\": \"Date and time of resource type association (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n },\n \"name\": {\n \"description\": \"Resource type names should be aligned with Heat resource types whenever possible: http:\/\/docs.openstack.org\/developer\/heat\/template_guide\/openstack.html\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"prefix\": {\n \"description\": \"Specifies the prefix to use for the given resource type. Any properties in the namespace should be prefixed with this prefix when being applied to the specified resource type. Must include prefix separator (e.g. a colon :). It is important to note that the same base property key can require different prefixes depending on the target resource type. For example: The desired virtual CPU topology can be set on both images and flavors via metadata. The keys have different prefixes on images than on flavors On flavors keys are prefixed with 'hw:', but on images the keys are prefixed with 'hw_'.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"properties_target\": {\n \"description\": \"Some resource types allow more than one key \/ value pair per instance. For example, Cinder allows user and image metadata on volumes. Only the image properties metadata is evaluated by Nova (scheduling or drivers). This property allows a namespace target to remove the ambiguity.\",\n \"maxLength\": 80,\n \"type\": \"string\"\n },\n \"updated_at\": {\n \"description\": \"Date and time of the last resource type association modification (READ-ONLY)\",\n \"format\": \"date-time\",\n \"type\": \"string\"\n }\n },\n \"required\": [\n \"name\"\n ]\n },\n \"type\": \"array\"\n },\n \"schema\": {\n \"type\": \"string\"\n }\n }\n}\n", "schema":"" } ] } ] } ] } ] } ] }