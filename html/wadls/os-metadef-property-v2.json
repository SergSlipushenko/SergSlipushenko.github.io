{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"/v2/metadefs/namespaces/{namespace}/properties", "parameters":{  }, "headers":{  }, "actions":[ { "method":"POST", "name":"Create property", "description":"\n \n Creates a property definition within a namespace.\n \n \n The schema is a subset of JSON property definition schema.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"name\": \"hypervisor_type\",\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"name\": \"hypervisor_type\",\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n}\n", "schema":"" } ] } ] }, { "method":"GET", "name":"List properties", "description":"\n Lists property definitions within\n a namespace.\n Returns a list of property definitions in a\n namespace.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"properties\": {\n \"hw_disk_bus\": {\n \"description\": \"Specifies the type of disk controller to attach disk devices to.\",\n \"enum\": [\n \"scsi\",\n \"virtio\",\n \"uml\",\n \"xen\",\n \"ide\",\n \"usb\"\n ],\n \"title\": \"Disk Bus\",\n \"type\": \"string\"\n },\n \"hw_machine_type\": {\n \"description\": \"Enables booting an ARM system using the specified machine type. By default, if an ARM image is used and its type is not specified, Compute uses vexpress-a15 (for ARMv7) or virt (for AArch64) machine types. Valid types can be viewed by using the virsh capabilities command (machine types are displayed in the machine tag).\",\n \"title\": \"Machine Type\",\n \"type\": \"string\"\n },\n \"hw_qemu_guest_agent\": {\n \"description\": \"It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS. For example, freezing and thawing filesystems, entering suspend. However, guest agent (GA) is not bullet proof, and hostile guest OS can send spurious replies.\",\n \"enum\": [\n \"yes\",\n \"no\"\n ],\n \"title\": \"QEMU Guest Agent\",\n \"type\": \"string\"\n },\n \"hw_rng_model\": {\n \"default\": \"virtio\",\n \"description\": \"Adds a random-number generator device to the image's instances. The cloud administrator can enable and control device behavior by configuring the instance's flavor. By default: The generator device is disabled. \/dev\/random is used as the default entropy source. To specify a physical HW RNG device, use the following option in the nova.conf file: rng_dev_path=\/dev\/hwrng\",\n \"title\": \"Random Number Generator Device\",\n \"type\": \"string\"\n },\n \"hw_scsi_model\": {\n \"default\": \"virtio-scsi\",\n \"description\": \"Enables the use of VirtIO SCSI (virtio-scsi) to provide block device access for compute instances; by default, instances use VirtIO Block (virtio-blk). VirtIO SCSI is a para-virtualized SCSI controller device that provides improved scalability and performance, and supports advanced SCSI hardware.\",\n \"title\": \"SCSI Model\",\n \"type\": \"string\"\n },\n \"hw_video_model\": {\n \"description\": \"The video image driver used.\",\n \"enum\": [\n \"vga\",\n \"cirrus\",\n \"vmvga\",\n \"xen\",\n \"qxl\"\n ],\n \"title\": \"Video Model\",\n \"type\": \"string\"\n },\n \"hw_video_ram\": {\n \"description\": \"Maximum RAM for the video image. Used only if a hw_video:ram_max_mb value has been set in the flavor's extra_specs and that value is higher than the value set in hw_video_ram.\",\n \"title\": \"Max Video Ram\",\n \"type\": \"integer\"\n },\n \"hw_vif_model\": {\n \"description\": \"Specifies the model of virtual network interface device to use. The valid options depend on the configured hypervisor. KVM and QEMU: e1000, ne2k_pci, pcnet, rtl8139, and virtio. VMware: e1000, e1000e, VirtualE1000, VirtualE1000e, VirtualPCNet32, VirtualSriovEthernetCard, and VirtualVmxnet. Xen: e1000, netfront, ne2k_pci, pcnet, and rtl8139.\",\n \"enum\": [\n \"e1000\",\n \"ne2k_pci\",\n \"pcnet\",\n \"rtl8139\",\n \"virtio\",\n \"e1000\",\n \"e1000e\",\n \"VirtualE1000\",\n \"VirtualE1000e\",\n \"VirtualPCNet32\",\n \"VirtualSriovEthernetCard\",\n \"VirtualVmxnet\",\n \"netfront\",\n \"ne2k_pci\"\n ],\n \"title\": \"Virtual Network Interface\",\n \"type\": \"string\"\n },\n \"os_command_line\": {\n \"description\": \"The kernel command line to be used by the libvirt driver, instead of the default. For linux containers (LXC), the value is used as arguments for initialization. This key is valid only for Amazon kernel, ramdisk, or machine images (aki, ari, or ami).\",\n \"title\": \"Kernel Command Line\",\n \"type\": \"string\"\n }\n }\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/metadefs/namespaces/{namespace}/properties/{property_name}{?resource_type}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get property definition", "description":"\n Gets the definition for a specified property.\n \n \n If you include the resource_type query\n parameter, the prefix of the included resource type is removed\n from the property name before the query is submitted. This\n enables you to look for a property name that starts with a\n prefix from an associated resource type.\n \n Response body shows a single property entity.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"name\": \"hypervisor_type\",\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n}\n", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update property definition", "description":"\n Updates a specified property definition.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"name\": \"hypervisor_type\",\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"description\": \"The hypervisor type. It may be used by the host properties filter for scheduling. The ImagePropertiesFilter filters compute nodes that satisfy any architecture, hypervisor type, or virtual machine mode properties specified on the instance's image properties. Image properties are contained in the image dictionary in the request_spec.\",\n \"enum\": [\n \"xen\",\n \"qemu\",\n \"kvm\",\n \"lxc\",\n \"uml\",\n \"vmware\",\n \"hyperv\"\n ],\n \"name\": \"hypervisor_type\",\n \"title\": \"Hypervisor Type\",\n \"type\": \"string\"\n}\n", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Remove property definition", "description":"\n \n Removes a specified property definition in a specified\n namespace.\n \n \n To remove a property, first make an update namespace request\n to set the protected attribute to false (boolean)\n on the namespace. Then, remove the property. If the operation\n succeeds, the response returns the HTTP 204 status code.\n \n \n If you try to remove a property in a namespace\n with the protected attribute set to true\n (boolean), the operation fails and the response returns the\n HTTP 403 error code.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[  ] } ] } ] } ] } ] }