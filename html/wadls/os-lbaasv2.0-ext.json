{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/loadbalancers", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List load balancers", "description":"\n Lists load balancers.\n Lists all load\n balancers that are associated with your tenant account.\n This operation does not require a request body.\n This operation returns a response body. It returns a\n (potentially empty) list. Each element in the list is\n a load balancer that can contain the following attributes:\n id\n tenant_id\n name\n description\n vip_subnet_id\n vip_address\n admin_state_up\n listeners\n provisioning_status\n operating_status\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"loadbalancers\": [\n {\n \"id\": \"3b98602c-3cfe-4f91-bfa4-c3a11c9e7fe0\",\n \"name\": \"Example LB\",\n \"description\": \"A very simple example load balancer.\",\n \"tenant_id\": \"783b31af-6635-48b2-a807-091d9973e3a9\",\n \"admin_state_up\": true,\n \"status\": \"ACTIVE\"\n },\n {\n \"id\": \"c617c538-daa5-4ead-be88-59521d8745a7\",\n \"name\": \"Example LB\",\n \"description\": \"A very simple example load balancer.\",\n \"tenant_id\": \"783b31af-6635-48b2-a807-091d9973e3a9\",\n \"admin_state_up\": true,\n \"status\": \"ACTIVE\"\n }\n ]\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"POST", "name":"Create load balancer", "description":"\n Creates a load balancer.\n \n This operation provisions a new load balancer based on the\n configuration defined in the request object. After the request\n is validated and progress has started on the provisioning\n process, a response object is returned. The object contains a\n unique identifier and the status of provisioning the load\n balancer.\n \n \n The provisioning_status of the load balancer in\n the response can have one of the following values:\n ACTIVE, PENDING_CREATE, or\n ERROR.\n \n \n If the status is PENDING_CREATE,\n the caller can view the progress of the provisioning operation by\n performing a GET on\n \/lbaas\/loadbalancers\/loadbalancer_id. When the status\n of the load balancer changes to ACTIVE, the load\n balancer was successfully provisioned and is operational for\n traffic handling.\n \n \n \n If the request cannot be fulfilled due to insufficient or\n invalid data, an HTTP 400 (Bad Request) error response is\n returned with information about the nature of the failure in\n the response body. Failures in the validation process are non-\n recoverable and require the caller to correct the cause of the\n failure and POST the request again.\n \n \n You can configure all documented features of the load balancer\n at creation time by specifying the additional elements or\n attributes in the request.\n \n Users with an administrative role can create load balancers on behalf\n of other tenants by specifying a tenant_id attribute different\n than their own.\n Example: Create a load balancer\n \n tenant_id. only required if the caller has an administrative role and wants to create a load balancer for another tenant.\n \n vip_subnet_id. The network on which to\n allocate the VIP address for the load balancer. A tenant can\n only create load balancer VIPs on networks that are authorized by the\n policy, such as her own networks or shared or provider\n networks.\n \n \n Some attributes receive default values if not specified in the request:\n \n admin_state_up. The default is true.\n name. The default is an empty string.\n description. The default is an empty string.\n \n \n If the request cannot be fulfilled due to insufficient data or\n data that is not valid, an HTTP 400 (Bad Request) error\n response is returned with information about the nature of the\n failure in the response body. Failures in the validation\n process are non-recoverable and require the caller to correct\n the cause of the failure and POST the request again.\n \n \n You can configure all documented features of the load balancer\n at creation time by specifying the additional elements or\n attributes in the request.\n \n \n Users with an administrative role can create load balancers on\n behalf of other tenants by specifying a tenant_id\n attribute that is different than their own.\n \n \n A user can supply a vip_address field if she owns\n the subnet on which the load balancer's VIP will be created.\n If a vip_address is not specified in the payload,\n the LBaaS service allocates one from the load balancer VIP's\n subnet.\n \n Example: Create a load balancer\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"loadbalancer\": {\n \"name\": \"loadbalancer1\",\n \"description\": \"simple lb\",\n \"tenant_id\": \"b7c1a69e88bf4b21a8148f787aef2081\",\n \"vip_subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\",\n \"vip_address\": \"10.0.0.4\",\n \"admin_state_up\": true\n }\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"loadbalancer\": {\n \"admin_state_up\": true,\n \"description\": \"simple lb\",\n \"id\": \"a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"listeners\": [],\n \"name\": \"loadbalancer1\",\n \"operating_status\": \"ONLINE\",\n \"provisioning_status\": \"ACTIVE\",\n \"tenant_id\": \"b7c1a69e88bf4b21a8148f787aef2081\",\n \"vip_address\": \"10.0.0.4\",\n \"vip_subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\"\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/loadbalancers/{loadbalancer_id}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show load balancer details", "description":"\n Shows details for a specified load\n balancer.\n This operation returns a load balancer object\n identified by loadbalancer_id. If the user is not an\n administrative user and the load balancer object does not belong to\n her tenant account, she would receive a 403\n (Forbidden) error.\n This operation does not require a request\n body.\n This operation returns a response body. On success,\n the returned element is a load balancer that can\n contain the following attributes:\n \n \n \n id\n \n \n \n \n tenant_id\n \n \n \n \n name\n \n \n \n \n description\n \n \n \n \n vip_subnet_id\n \n \n \n \n vip_address\n \n \n \n \n admin_state_up\n \n \n \n \n listeners\n \n \n \n \n provisioning_status\n \n \n \n \n operating_status\n \n \n \n \n Example: Show load\n balancer details\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"loadbalancer\":{\n \"id\":\"8992a43f-83af-4b49-9afd-c2bfbd82d7d7\",\n \"name\":\"Example LB\",\n \"description\":\"A very simple example load balancer.\",\n \"vip_address\":\"1.2.3.4\",\n \"vip_subnet_id\":\"SUBNET_ID\",\n \"tenant_id\":\"7725fe12-1c14-4f45-ba8e-44bf01763578\",\n \"admin_state_up\":true,\n \"status\":\"ACTIVE\"\n }\n}", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update load balancer", "description":"\n Updates a specified load balancer.\n \n This operation updates the attributes of the specified load\n balancer. Upon successful validation of the request, the\n service returns a 202 (Accepted) response code. A caller\n should check that the load balancer provisioning_status has\n changed to ACTIVE to confirm that the update has taken effect.\n If the load balancer provisioning_status is\n PENDING_UPDATE, the caller can poll the load\n balancer object by using a GET operation to wait for the\n changes to be applied.\n \n \n The update operation allows the caller to change one or more\n of the following load balancer attributes:\n \n \n name\n description\n admin_state_up\n \n \n This operation returns the updated load balancer object. The\n provisioning_status of the load balancer in the\n response can take one of the following values:\n ACTIVE, PENDING_UPDATE, or\n ERROR.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"loadbalancer\": {\n \"admin_state_up\": false,\n \"description\": \"simple lb2\",\n \"name\": \"loadbalancer2\"\n }\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"loadbalancer\": {\n \"admin_state_up\": false,\n \"description\": \"simple lb2\",\n \"id\": \"a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"listeners\": [],\n \"name\": \"loadbalancer2\",\n \"operating_status\": \"ONLINE\",\n \"provisioning_status\": \"PENDING_UPDATE\",\n \"tenant_id\": \"b7c1a69e88bf4b21a8148f787aef2081\",\n \"vip_address\": \"10.0.0.4\",\n \"vip_subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\"\n }\n}\n", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Remove load balancer", "description":"\n Removes a specified load balancer.\n \n This operation removes the specified load balancer and its\n associated configuration from the tenant account. Any and all\n configuration data is immediately purged and cannot be\n recovered.\n \n This operation does not require a request body.\n This operation does not return a response body.\n Example: Delete a load balancer\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/listeners", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List listeners", "description":"\n Lists listeners.\n This operation lists all listeners associated with your tenant account.\n This operation does not require a request body.\n This operation returns a response body. It returns a (potentially empty) list. Each list element is a listener that can contain the following attributes:\n id\n tenant_id\n name\n description\n protocol\n protocol_port\n connection_limit\n default_pool_id\n admin_state_up\n loadbalancers\n default_tls_container_ref\n sni_container_refs\n \n Example: List listeners\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"listeners\": [\n {\n \"admin_state_up\": true,\n \"connection_limit\": 100,\n \"default_pool_id\": null,\n \"description\": \"\",\n \"id\": \"35cb8516-1173-4035-8dae-0dae3453f37f\",\n \"loadbalancers\": [\n {\n \"id\": \"a9729389-6147-41a3-ab22-a24aed8692b2\"\n }\n ],\n \"name\": \"\",\n \"protocol\": \"HTTP\",\n \"protocol_port\": 80,\n \"tenant_id\": \"3e4d8bec50a845fcb09e03a4375c691d\",\n \"default_tls_container_ref\": \"https:\/\/barbican.endpoint\/containers\/a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"sni_container_refs\": [\n \"https:\/\/barbican.endpoint\/containers\/b36c20d0-18e9-42ce-88fd-82a35977ee8d\",\n \"https:\/\/barbican.endpoint\/containers\/c36c20d0-18e9-42ce-88fd-82a35977ee8e\"\n ]\n }\n ]\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"POST", "name":"Create listener", "description":"\n Creates a listener.\n \n This operation provisions a new listener based on the\n configuration defined in the request object. After the request\n is validated and progress has started on the provisioning\n process, a response object is returned. The object contains a\n unique identifier.\n \n \n The caller of this operation must specify these listener\n attributes, at a minimum:\n \n \n \n \n tenant_id. Required only if the caller\n has an administrative role and wants to create a\n listener for another tenant.\n \n \n \n \n loadbalancer_id. The load balancer on\n which this listener is provisioned. A tenant can only\n create listeners on load balancers authorized by\n policy. For example, her own load balancers.\n \n \n \n \n description. The load balancer description.\n \n \n \n \n protocol. The protocol for which the front end\n listens. Must be TCP, HTTP, or HTTPS.\n \n \n \n \n protocol_port. The port on which the\n front end listens. Must be an integer from 1 to 65535.\n \n \n \n \n default_tls_container_ref. The reference\n to a container that holds TLS secrets. If you also specify\n sni_container_refs, this container will be the default.\n \n \n \n \n sni_container_refs. A list of references\n to containers that hold TLS secrets that are used for Server\n Name Indication (SNI).\n \n \n \n Some attributes receive default values if not specified in the request:\n \n \n \n admin_state_up. The default is true.\n \n \n \n \n name. The default is an empty string.\n \n \n \n \n description. The default is an empty string.\n \n \n \n \n connection_limit. The default is\n -1, which indicates an infinite limit.\n \n \n \n \n If the request cannot be fulfilled due to insufficient or\n invalid data, an HTTP 400 (Bad Request) error response is\n returned with information regarding the nature of the failure\n in the response body. Failures in the validation process are\n non-recoverable and require the caller to correct the cause of\n the failure and POST the request again.\n \n \n You can configure all documented features of the listener at\n creation time by specifying the additional elements or\n attributes in the request.\n \n \n Users with an administrative role can create listeners on\n behalf of other tenants by specifying a tenant_id\n attribute different than their own.\n \n \n A listener cannot be updated if the load balancer that it is\n attempting to be attached to does not have a\n provisioning_status of ACTIVE.\n \n Example: Create a listener\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"listener\": {\n \"admin_state_up\": true,\n \"connection_limit\": 100,\n \"description\": \"listener one\",\n \"loadbalancer_id\": \"a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"name\": \"listener1\",\n \"protocol\": \"HTTP\",\n \"protocol_port\": \"80\",\n \"default_tls_container_ref\": \"https:\/\/barbican.endpoint\/containers\/a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"sni_container_refs\": [\n \"https:\/\/barbican.endpoint\/containers\/b36c20d0-18e9-42ce-88fd-82a35977ee8d\",\n \"https:\/\/barbican.endpoint\/containers\/c36c20d0-18e9-42ce-88fd-82a35977ee8e\"\n ]\n }\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"listener\": {\n \"admin_state_up\": true,\n \"connection_limit\": 100,\n \"default_pool_id\": null,\n \"description\": \"listener one\",\n \"id\": \"39de4d56-d663-46e5-85a1-5b9d5fa17829\",\n \"loadbalancers\": [\n {\n \"id\": \"a36c20d0-18e9-42ce-88fd-82a35977ee8c\"\n }\n ],\n \"name\": \"listener1\",\n \"protocol\": \"HTTP\",\n \"protocol_port\": 80,\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\",\n \"default_tls_container_ref\": \"https:\/\/barbican.endpoint\/containers\/a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"sni_container_refs\": [\n \"https:\/\/barbican.endpoint\/containers\/b36c20d0-18e9-42ce-88fd-82a35977ee8d\",\n \"https:\/\/barbican.endpoint\/containers\/c36c20d0-18e9-42ce-88fd-82a35977ee8e\"\n ]\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/listeners/{listener_id}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show listener details", "description":"\n Shows details for a specified listener.\n This operation returns a listener object identified by listener_id. If the user is not an administrative user, and the listener object does not belong to her tenant account, she receives a 403 (Forbidden) error.\n This operation does not require a request body.\n This operation returns a response body. On success, the returned element is a listener that can contain the following attributes:\n id\n tenant_id\n name\n description\n protocol\n protocol_port\n connection_limit\n default_pool_id\n admin_state_up\n loadbalancers\n default_tls_container_ref\n sni_container_refs\n \n Example: Show listener details\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"listener\": {\n \"admin_state_up\": true,\n \"connection_limit\": 100,\n \"default_pool_id\": null,\n \"description\": \"\",\n \"id\": \"35cb8516-1173-4035-8dae-0dae3453f37f\",\n \"loadbalancers\": [\n {\n \"id\": \"a9729389-6147-41a3-ab22-a24aed8692b2\"\n }\n ],\n \"name\": \"\",\n \"protocol\": \"HTTP\",\n \"protocol_port\": 80,\n \"tenant_id\": \"3e4d8bec50a845fcb09e03a4375c691d\",\n \"default_tls_container_ref\": \"https:\/\/barbican.endpoint\/containers\/a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"sni_container_refs\": [\n \"https:\/\/barbican.endpoint\/containers\/b36c20d0-18e9-42ce-88fd-82a35977ee8d\",\n \"https:\/\/barbican.endpoint\/containers\/c36c20d0-18e9-42ce-88fd-82a35977ee8e\"\n ]\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update listener", "description":"\n Updates a specified listener.\n This operation updates the attributes of a specified listener. Upon successful validation of the request, the service returns a 202 (Accepted) response code.\n The update operation allows the caller to change one or more of the following listener attributes:\n \n name\n description\n admin_state_up\n connection_limit\n default_tls_container_ref\n sni_container_refs\n \n Example: Update a listener\n Note: You cannot update these listener\n attributes: listener_id, tenant_id,\n loadbalancer_id, loadbalancers,\n default_pool_id, protocol, and\n protocol_port. Attempting to update an immutable attribute results\n in a 422 (Immutable) fault.\n Note: You cannot update a listener if the load balancer to\n which the listener is attached does not have a provisioning_status of\n ACTIVE.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"listener\": {\n \"admin_state_up\": false,\n \"connection_limit\": 200,\n \"description\": \"listener two\",\n \"name\": \"listener2\",\n \"default_tls_container_ref\": \"https:\/\/barbican.endpoint\/containers\/a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"sni_container_refs\": [\n \"https:\/\/barbican.endpoint\/containers\/b36c20d0-18e9-42ce-88fd-82a35977ee8d\",\n \"https:\/\/barbican.endpoint\/containers\/c36c20d0-18e9-42ce-88fd-82a35977ee8e\"\n ]\n }\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"listener\": {\n \"admin_state_up\": false,\n \"connection_limit\": 200,\n \"default_pool_id\": null,\n \"description\": \"listener two\",\n \"id\": \"39de4d56-d663-46e5-85a1-5b9d5fa17829\",\n \"loadbalancers\": [\n {\n \"id\": \"a36c20d0-18e9-42ce-88fd-82a35977ee8c\"\n }\n ],\n \"name\": \"listener2\",\n \"protocol\": \"HTTP\",\n \"protocol_port\": 80,\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\",\n \"default_tls_container_ref\": \"https:\/\/barbican.endpoint\/containers\/a36c20d0-18e9-42ce-88fd-82a35977ee8c\",\n \"sni_container_refs\": [\n \"https:\/\/barbican.endpoint\/containers\/b36c20d0-18e9-42ce-88fd-82a35977ee8d\",\n \"https:\/\/barbican.endpoint\/containers\/c36c20d0-18e9-42ce-88fd-82a35977ee8e\"\n ]\n }\n}\n", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Remove listener", "description":"\n Removes a specified listener.\n This operation removes a specified listener and its associated configuration from the tenant account. Any and all configuration data is immediately purged and is not recoverable.\n This operation does not require a request body.\n This operation does not return a response body.\n You cannot delete a listener if the load balancer to which it is attached does not have a provisioning_status of ACTIVE.\n Example: Delete a listener\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/pools", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List pools", "description":"\n Lists pools.\n This operation lists all pools that are associated with your tenant account.\n This operation does not require a request body.\n This operation returns a response body. It returns a (potentially empty) list. Each element in the list is a pool that can contain the following attributes:\n \n id\n tenant_id\n name\n description\n protocol\n lb_method\n session_persistence\n admin_state_up\n listeners\n members\n healthmonitor_id\n \n Example: List pools\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"pools\": [\n {\n \"admin_state_up\": true,\n \"description\": \"simple pool\",\n \"healthmonitor_id\": null,\n \"id\": \"4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5\",\n \"lb_algorithm\": \"ROUND_ROBIN\",\n \"listeners\": [\n {\n \"id\": \"35cb8516-1173-4035-8dae-0dae3453f37f\"\n }\n ],\n \"members\": [],\n \"name\": \"pool1\",\n \"protocol\": \"HTTP\",\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\"\n }\n ]\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"POST", "name":"Create pool", "description":"\n Creates a pool.\\\n This operation provisions a new pool based on the configuration defined in the request object. After the request is validated and progress has started on the provisioning process, a response object is returned. The object contains a unique identifier.\n The caller of this operation must specify these pool attributes, at a minimum:\n \n tenant_id. Only required if the caller has an administrative role and wants to create a pool for another tenant.\n protocol. The protocol this pool and its members listen for. Must be one of TCP, HTTP, or HTTPS\n \n lb_method. The load-balancer algorithm, which\n is round-robin, least-connections, and so on, that is used to distribute\n traffic to the pool members. This value, which must be supported, is dependent\n on the load-balancer provider. The round-robin algorithm must be supported.\n \n protocol_port. The port on which the front end listens. Must be an integer in the range from 1 to 65535.\n listener_id. The listener in which this pool becomes the default pool. There can only be on default pool for a listener.\n \n Some attributes receive default values if not specified in the request:\n \n admin_state_up. The default is true.\n name. The default is an empty string.\n description. The default is an empty string.\n session_persistence. The default is an empty dictionary.\n \n If the request cannot be fulfilled due to insufficient or\n invalid data, an HTTP 400 (Bad Request) error response is returned\n with information about the nature of the failure in the response\n body. Failures in the validation process are non-recoverable and require the\n caller to correct the cause of the failure and POST the request\n again.\n Users can configure all documented features at creation time by providing the additional elements or attributes in the request.\n Users with an administrative role can create pools on behalf of other tenants by specifying a tenant_id attribute that is different than their own.\n You cannot update a pool if the load balancer to which it is attempting to be attached does not have a provisioning_status of ACTIVE.\n Example: Create a pool\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"pool\": {\n \"admin_state_up\": true,\n \"description\": \"simple pool\",\n \"lb_algorithm\": \"ROUND_ROBIN\",\n \"listener_id\": \"39de4d56-d663-46e5-85a1-5b9d5fa17829\",\n \"name\": \"pool1\",\n \"protocol\": \"HTTP\",\n \"session_persistence\": {\n \"cookie_name\": \"my_cookie\",\n \"type\": \"APP_COOKIE\"\n }\n }\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"pool\": {\n \"admin_state_up\": true,\n \"description\": \"simple pool\",\n \"healthmonitor_id\": null,\n \"id\": \"12ff63af-4127-4074-a251-bcb2ecc53ebe\",\n \"lb_algorithm\": \"ROUND_ROBIN\",\n \"listeners\": [\n {\n \"id\": \"39de4d56-d663-46e5-85a1-5b9d5fa17829\"\n }\n ],\n \"members\": [],\n \"name\": \"pool1\",\n \"protocol\": \"HTTP\",\n \"session_persistence\": {\n \"cookie_name\": \"my_cookie\",\n \"type\": \"APP_COOKIE\"\n },\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\"\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/pools/{pool_id}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show pool details", "description":"\n Shows details for a specified pool.\n This operation returns a pool object identified by pool_id. If the user is not an administrative user and the pool object does not belong to her tenant account, she receives a 403 (Forbidden) error.\n This operation does not require a request body.\n This operation returns a response body. On success, the returned element is a pool that can contain the following attributes:\n \n id\n tenant_id\n name\n description\n protocol\n lb_method\n session_persistence\n admin_state_up\n listeners\n members\n healthmonitor_id\n \n Example: Show pool details\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"pool\": {\n \"admin_state_up\": true,\n \"description\": \"simple pool\",\n \"healthmonitor_id\": null,\n \"id\": \"4c0a0a5f-cf8f-44b7-b912-957daa8ce5e5\",\n \"lb_algorithm\": \"ROUND_ROBIN\",\n \"listeners\": [\n {\n \"id\": \"35cb8516-1173-4035-8dae-0dae3453f37f\"\n }\n ],\n \"members\": [],\n \"name\": \"pool1\",\n \"protocol\": \"HTTP\",\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\"\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update pool", "description":"\n Updates a specified pool.\n This operation updates the attributes of the specified pool. Upon successful validation of the request, the service returns a 202 (Accepted) response code.\n The update operation allows the caller to change one or more of the following pool attributes:\n \n name\n description\n admin_state_up\n lb_method\n session_persistence\n \n Note:\n You cannot update these attributes: pool ID, tenant_id, listener_id, listeners, healthmonitor_id, protocol, and members are immutable attributes. If you try to update any of these attributes, a 422 (Immutable) fault is returned.\n Note:\n You cannot update a pool if the load balancer to which it is attached does not have a provisioning_status of ACTIVE.\n Example: Update a pool\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"pool\": {\n \"admin_state_up\": false,\n \"description\": \"pool two\",\n \"lb_algorithm\": \"LEAST_CONNECTIONS\",\n \"name\": \"pool2\",\n \"session_persistence\": {\n \"type\": \"HTTP_COOKIE\"\n }\n }\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"pool\": {\n \"admin_state_up\": false,\n \"description\": \"pool two\",\n \"healthmonitor_id\": null,\n \"id\": \"12ff63af-4127-4074-a251-bcb2ecc53ebe\",\n \"lb_algorithm\": \"LEAST_CONNECTIONS\",\n \"listeners\": [\n {\n \"id\": \"39de4d56-d663-46e5-85a1-5b9d5fa17829\"\n }\n ],\n \"members\": [],\n \"name\": \"pool2\",\n \"protocol\": \"HTTP\",\n \"session_persistence\": {\n \"cookie_name\": null,\n \"type\": \"HTTP_COOKIE\"\n },\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\"\n }\n}\n", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Remove pool", "description":"\n Removes a specified pool.\n This operation removes a specified pool and its associated configuration from the tenant account. Any and all configuration data is immediately purged and is not recoverable.\n This operation does not require a request body.\n This operation does not return a response body.\n You cannot delete a pool if the load balancer to which it is attached does not have a provisioning_status of ACTIVE.\n Example: Delete a pool\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/pools/{pool_id}/members", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List pool members", "description":"\n Lists members of a specified pool.\n \n Lists all members that are associated with a pool that is\n associated with your tenant account. The list of members\n includes only members that belong to the pool object\n identified by pool_id.\n \n This operation does not require a request body.\n This operation returns a response body. It returns a (potentially empty) list. Each element in the list is a member that can contain the following attributes:\n \n id\n tenant_id\n address\n protocol_port\n weight\n subnet_id\n admin_state_up\n \n Example: List pool members\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"members\": [\n {\n \"address\": \"10.0.0.8\",\n \"admin_state_up\": true,\n \"id\": \"9a7aff27-fd41-4ec1-ba4c-3eb92c629313\",\n \"protocol_port\": 80,\n \"subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\",\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\",\n \"weight\": 1\n }\n ]\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"POST", "name":"Add member to pool", "description":"\n Adds a member to a pool.\n This operation provisions a new member and adds it to a pool\n based on the configuration defined in the request object. After\n the request is validated and progress has started on the\n provisioning process, a response object is returned. The object\n contains a unique identifier.\n The caller of this operation must specify the following pool attributes, at a minimum:\n \n tenant_id. Only required if the caller has an administrative role and wants to create a pool for another tenant.\n address. The IP Address of the member to receive traffic from the load balancer.\n protocol_port The port that the member is listening to receive traffic.\n \n Some attributes receive default values if not specified in the request:\n \n admin_state_up. The default is true.\n weight. The default is 1.\n \n \n If you omit the subnet_id parameter, LBaaS\n uses the vip_subnet_id parameter value for the subnet ID.\n \n \n If the request fails due to incorrect data, the response\n returns an HTTP 400 (Bad Request) error with information about\n reason for the failure. Validation errors require that you\n correct the error and submit the request again.\n \n \n To configure all documented member features at creation time,\n specify additional elements or attributes in the request.\n \n \n Users with an administrative role can create members on behalf\n of other tenants by specifying a tenant_id\n attribute that is different than their own.\n \n \n To update a member, the load balancer must have a\n provisioning_status of ACTIVE.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"member\": {\n \"address\": \"10.0.0.8\",\n \"admin_state_up\": true,\n \"protocol_port\": \"80\",\n \"subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\",\n \"weight\": \"1\"\n }\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"member\": {\n \"address\": \"10.0.0.8\",\n \"admin_state_up\": true,\n \"id\": \"9a7aff27-fd41-4ec1-ba4c-3eb92c629313\",\n \"protocol_port\": 80,\n \"subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\",\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\",\n \"weight\": 1\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/pools/{pool_id}/members/{member_id}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show pool member details", "description":"\n Shows details for a specified pool member.\n This operation returns a member object identified by member_id that belongs to a pool object identified by pool_id. If the user is not an administrative user and the pool or member object does not belong to her tenant account, she receives a 403 (Forbidden) error.\n This operation does not require a request body.\n This operation returns a response body. On success, the returned element is a pool that can contain the following attributes:\n \n id\n tenant_id\n address\n protocol_port\n weight\n subnet_id\n admin_state_up\n \n Example: Show pool member details\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"member\": {\n \"address\": \"10.0.0.8\",\n \"admin_state_up\": true,\n \"id\": \"9a7aff27-fd41-4ec1-ba4c-3eb92c629313\",\n \"protocol_port\": 80,\n \"subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\",\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\",\n \"weight\": 1\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update pool member", "description":"\n Updates a specified member of a pool.\n This operation updates the attributes of the specified pool. Upon successful validation of the request, the service returns a 200 (OK) response code.\n The update operation allows the caller to change one or more of the following pool attributes:\n \n weight\n admin_state_up\n \n Note: You cannot update these attributes: The member ID, tenant_id, address, protocol_port, and subnet_id. If you attempt to update any of these attributes, a 422 (Immutable) fault is returned.\\\n Note: You cannot update a member if the attached load balancer does not have a provisioning_status of ACTIVE.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"member\": {\n \"admin_state_up\": false,\n \"weight\": 5\n }\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"member\": {\n \"address\": \"10.0.0.8\",\n \"admin_state_up\": false,\n \"id\": \"9a7aff27-fd41-4ec1-ba4c-3eb92c629313\",\n \"protocol_port\": 80,\n \"subnet_id\": \"013d3059-87a4-45a5-91e9-d721068ae0b2\",\n \"tenant_id\": \"1a3e005cf9ce40308c900bcb08e5320c\",\n \"weight\": 5\n }\n}\n", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Remove member from pool", "description":"\n Removes a member from a pool.\n This operation removes the specified member and its associated configuration from the tenant account. Any and all configuration data is immediately purged and is not recoverable.\n This operation does not require a request body.\n This operation does not return a response body.\n A member cannot be deleted if the attached load balancer does not have a provisioning_status of ACTIVE.\n Example: Remove a member from a pool\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/healthmonitors", "parameters":{  }, "headers":{  }, "actions":[ { "method":"POST", "name":"Create health monitor", "description":"\n Creates a health monitor.\n This operation provisions a new health monitor based on the configuration defined in the request object. After the request is validated and progress has started on the provisioning process, a response object is returned. The object contains a unique identifier.\n The caller of this operation must specify these health monitor attributes, at a minimum:\n \n tenant_id. Only required if the caller has an administrative role and wants to create a health monitor for another tenant.\n type. The type of health monitor. Must be one of TCP, HTTP, HTTPS\n delay. The interval in seconds between health checks.\n timeout. The time in seconds that a health check times out.\n max_retries. Number of failed health checks before marked as OFFLINE.\n pool_id. The pool that this health monitor will monitor.\n \n Some attributes will receive default values if not specified in the request and are only useful when health monitor type of HTTP(S) is specified:\n \n http_method. The default is GET.\n url_path. The default is \/.\n expected_codes. The expected http status codes to get from a successful health check. Default is 200.\n admin_state_up. The default is true.\n \n \n If the request cannot be fulfilled due to insufficient data or\n data that is not valid, an HTTP 400 (Bad Request) error\n response is returned with information regarding the nature of\n the failure in the response body. Failures in the validation\n process are non-recoverable and require the caller to correct\n the cause of the failure and POST the request again.\n \n \n You can configure all documented features of the health\n monitor at creation time by specifying the additional elements\n or attributes in the request.\n \n \n Users with an administrative role can create health monitors\n on behalf of other tenants by specifying a\n tenant_id attribute different than their own.\n \n \n To update a health monitor, the load balancer to which it is\n being attached must have an ACTIVE provisioning status.\n \n Example: Create a health monitor\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"healthmonitor\": {\n \"admin_state_up\": true,\n \"delay\": \"1\",\n \"expected_codes\": \"200,201,202\",\n \"http_method\": \"GET\",\n \"max_retries\": 5,\n \"pool_id\": \"74aa2010-a59f-4d35-a436-60a6da882819\",\n \"timeout\": 1,\n \"type\": \"HTTP\",\n \"url_path\": \"\/index.html\"\n }\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"healthmonitor\": {\n \"admin_state_up\": true,\n \"delay\": 1,\n \"expected_codes\": \"200,201,202\",\n \"http_method\": \"GET\",\n \"id\": \"0a9ac99d-0a09-4b18-8499-a0796850279a\",\n \"max_retries\": 5,\n \"pools\": [\n {\n \"id\": \"74aa2010-a59f-4d35-a436-60a6da882819\"\n }\n ],\n \"tenant_id\": \"6f3584d5754048a18e30685362b88411\",\n \"timeout\": 1,\n \"type\": \"HTTP\",\n \"url_path\": \"\/index.html\"\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"GET", "name":"List health monitors", "description":"\n Lists health monitors.\n This operation lists all health monitors associated with your tenant account.\n This operation does not require a request body.\n This operation returns a response body. It returns a (potentially empty) list, each element in the list is a health monitor that can contain the following attributes:\n \n id\n tenant_id\n type\n delay\n timeout\n max_retries\n http_method\n url_path\n expected_codes\n admin_state_up\n pool_id\n pools\n \n Example: List health monitors\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"healthmonitors\": [\n {\n \"admin_state_up\": true,\n \"delay\": 1,\n \"expected_codes\": \"200,201,202\",\n \"http_method\": \"GET\",\n \"id\": \"0a9ac99d-0a09-4b18-8499-a0796850279a\",\n \"max_retries\": 5,\n \"pools\": [\n {\n \"id\": \"74aa2010-a59f-4d35-a436-60a6da882819\"\n }\n ],\n \"tenant_id\": \"6f3584d5754048a18e30685362b88411\",\n \"timeout\": 1,\n \"type\": \"HTTP\",\n \"url_path\": \"\/index.html\"\n }\n ]\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2.0/lbaas/healthmonitors/{health_monitor_id}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show health monitor details", "description":"\n Shows details for a specified health monitor.\n \n This operation returns a health monitor object identified by\n healthmonitor_id. If the user is not an administrative user,\n and the health monitor object does not belong to her tenant\n account, she receives a 403 (Forbidden) error.\n \n This operation does not require a request body.\n This operation returns a response body. On success, the returned element is a health monitor that can contain the following attributes:\n \n id\n tenant_id\n type\n delay\n timeout\n max_retries\n http_method\n url_path\n expected_codes\n admin_state_up\n pool_id\n pools\n \n Example: Show health monitor details\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"healthmonitor\": {\n \"admin_state_up\": true,\n \"delay\": 1,\n \"expected_codes\": \"200,201,202\",\n \"http_method\": \"GET\",\n \"id\": \"0a9ac99d-0a09-4b18-8499-a0796850279a\",\n \"max_retries\": 5,\n \"pools\": [\n {\n \"id\": \"74aa2010-a59f-4d35-a436-60a6da882819\"\n }\n ],\n \"tenant_id\": \"6f3584d5754048a18e30685362b88411\",\n \"timeout\": 1,\n \"type\": \"HTTP\",\n \"url_path\": \"\/index.html\"\n }\n}\n", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update health monitor", "description":"\n Updates a specified health monitor.\n This operation updates the attributes of the specified health monitor. Upon successful validation of the request, the service returns the 202 (Accepted) response code.\n The update operation enables you to change one or more health monitor attributes:\n \n delay\n timeout\n max_retries\n http_method\n url_path\n expected_codes\n admin_state_up\n \n Note:\n The health monitor's ID, tenant_id, pool_id, and type\n are immutable attributes and cannot be updated. Supplying an unsupported attribute results in a 422 (Immutable) fault.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"healthmonitor\": {\n \"admin_state_up\": false,\n \"delay\": \"2\",\n \"expected_codes\": \"200\",\n \"http_method\": \"POST\",\n \"max_retries\": 2,\n \"timeout\": 2,\n \"url_path\": \"\/page.html\"\n }\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"healthmonitor\": {\n \"admin_state_up\": false,\n \"delay\": 2,\n \"expected_codes\": \"200\",\n \"http_method\": \"POST\",\n \"id\": \"0a9ac99d-0a09-4b18-8499-a0796850279a\",\n \"max_retries\": 2,\n \"pools\": [\n {\n \"id\": \"74aa2010-a59f-4d35-a436-60a6da882819\"\n }\n ],\n \"tenant_id\": \"6f3584d5754048a18e30685362b88411\",\n \"timeout\": 2,\n \"type\": \"HTTP\",\n \"url_path\": \"\/page.html\"\n }\n}\n", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Remove health monitor", "description":"\n Removes a specified health monitor.\n This operation removes the specified health monitor and its associated configuration from the tenant account. Any and all configuration data is immediately purged and is not recoverable.\n This operation does not require a request body.\n This operation does not return a response body.\n You cannot delete a health monitor if the attached load balancer does not have a provisioning_status of ACTIVE.\n Example: Delete a health monitor\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"400", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"401", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"413", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"500", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"503", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] } ] } ] }