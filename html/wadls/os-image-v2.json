{ "_version":"1.0", "metadata":{ "FORMAT":{ "value":"1A" } }, "name":"", "description":"", "resourceGroups":[ { "name":"All Methods", "description":"", "resources":[ { "name":"", "description":"", "uriTemplate":"/", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List API versions", "description":"\n Lists information about all Image\n service API versions.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200 300", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"versions\": [\n {\n \"status\": \"CURRENT\",\n \"id\": \"v2.2\",\n \"links\": [\n {\n \"href\": \"http:\/\/23.253.228.211:9292\/v2\/\",\n \"rel\": \"self\"\n }\n ]\n },\n {\n \"status\": \"SUPPORTED\",\n \"id\": \"v2.1\",\n \"links\": [\n {\n \"href\": \"http:\/\/23.253.228.211:9292\/v2\/\",\n \"rel\": \"self\"\n }\n ]\n },\n {\n \"status\": \"SUPPORTED\",\n \"id\": \"v2.0\",\n \"links\": [\n {\n \"href\": \"http:\/\/23.253.228.211:9292\/v2\/\",\n \"rel\": \"self\"\n }\n ]\n },\n {\n \"status\": \"SUPPORTED\",\n \"id\": \"v1.1\",\n \"links\": [\n {\n \"href\": \"http:\/\/23.253.228.211:9292\/v1\/\",\n \"rel\": \"self\"\n }\n ]\n },\n {\n \"status\": \"SUPPORTED\",\n \"id\": \"v1.0\",\n \"links\": [\n {\n \"href\": \"http:\/\/23.253.228.211:9292\/v1\/\",\n \"rel\": \"self\"\n }\n ]\n }\n ]\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images{?limit,marker,name,visibility,member_status,owner,status,size_min,size_max,sort_key,sort_dir,sort,tag}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"List images", "description":"\n Lists public virtual machine (VM)\n images. (Since Image API v2.0.)\n \n \n Returns a subset of the larger collection of images and a link\n that you can use to get the next set of images. You should always\n check for the presence of a next link and use it as\n the URI in a subsequent HTTP GET request. You should follow this\n pattern until a next link is no longer provided. The\n next link preserves any query parameters that you send in your\n initial request. You can use the first link to jump\n back to the first page of the collection. If you prefer to\n paginate through images manually, use the limit and\n marker parameters.\n \n \n The list operation accepts several types of query parameters that\n let you filter the results of the returned collection.\n \n \n A client can provide direct comparison filters using most image\n attributes, such as name=Ubuntu,\n visibility=public, and so on. A client cannot filter\n on tags or anything defined as a link in the json-\n schema, such as self, file, or schema.\n \n You can use the size_min and\n size_max query parameters to perform\n greater-than and less-than filtering of images based\n on their size attribute. The size is\n measured in bytes and refers to the size of an image\n when it is stored on disk.\n \n For example, sending a size_min filter\n of 1048576 and size_max of 4194304\n filters the container to include only images that are\n between 1 and 4 MB.\n \n You can see a list of VM images which status is in\n active, queued, or\n saving.\n \n \n You can use query parameters to sort the results of this operation.\n \n \n \n \n sort_key. Sorts by the requested image\n attribute. Sorts in the natural sorting direction of the image attribute that\n is provided as the sort_key.\n \n \n \n \n sort_dir. Sorts in a specified sort direction.\n \n \n \n \n sort. Sorts by one or more sets of attribute\n and sort direction combinations. If you omit the sort direction in a set,\n the default is desc.\n \n \n \n To specify the sort_key and\n sort_dir query parameters to sort the results:\n \n GET \/v2\/images?sort_key=name&sort_dir=asc&sort_key=status&sort_dir=desc\n To specify the sort query parameter to sort the results:\n \n GET \/v2\/images?sort=name:asc,status:desc\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"images\": [\n {\n \"status\": \"active\",\n \"name\": \"cirros-0.3.2-x86_64-disk\",\n \"tags\": [],\n \"container_format\": \"bare\",\n \"created_at\": \"2014-11-07T17:07:06Z\",\n \"disk_format\": \"qcow2\",\n \"updated_at\": \"2014-11-07T17:19:09Z\",\n \"visibility\": \"public\",\n \"self\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"min_disk\": 0,\n \"protected\": false,\n \"id\": \"1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"file\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\/file\",\n \"checksum\": \"64d7c1cd2b6f60c92c14662941cb7913\",\n \"owner\": \"5ef70662f8b34079a6eddb8da9d75fe8\",\n \"size\": 13167616,\n \"min_ram\": 0,\n \"schema\": \"\/v2\/schemas\/image\",\n \"virtual_size\": null\n },\n {\n \"status\": \"active\",\n \"name\": \"F17-x86_64-cfntools\",\n \"tags\": [],\n \"container_format\": \"bare\",\n \"created_at\": \"2014-10-30T08:23:39Z\",\n \"disk_format\": \"qcow2\",\n \"updated_at\": \"2014-11-03T16:40:10Z\",\n \"visibility\": \"public\",\n \"self\": \"\/v2\/images\/781b3762-9469-4cec-b58d-3349e5de4e9c\",\n \"min_disk\": 0,\n \"protected\": false,\n \"id\": \"781b3762-9469-4cec-b58d-3349e5de4e9c\",\n \"file\": \"\/v2\/images\/781b3762-9469-4cec-b58d-3349e5de4e9c\/file\",\n \"checksum\": \"afab0f79bac770d61d24b4d0560b5f70\",\n \"owner\": \"5ef70662f8b34079a6eddb8da9d75fe8\",\n \"size\": 476704768,\n \"min_ram\": 0,\n \"schema\": \"\/v2\/schemas\/image\",\n \"virtual_size\": null\n }\n ],\n \"schema\": \"\/v2\/schemas\/images\",\n \"first\": \"\/v2\/images\"\n}\n", "schema":"" } ] } ] }, { "method":"POST", "name":"Create image", "description":"\n Creates a virtual machine (VM)\n image. (Since Image API v2.0.)\n \n Created with a Location header that\n contains the newly-created URI for the image. Response\n body represents the created image entity.\n \n Synchronous Postconditions\n \n \n With correct permissions, you can see\n the image status as queued through API\n calls.\n \n \n \n With correct permissions, you can see\n the image status as active through API\n calls if you created the image with\n Location header.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"name\": \"Ubuntu 12.10\",\n \"tags\": [\n \"ubuntu\",\n \"quantal\"\n ],\n \"container_format\": \"bare\",\n \"disk_format\": \"qcow2\",\n \"visibility\": \"private\",\n \"min_disk\": 0,\n \"protected\": false,\n \"min_ram\": 0\n}\n", "schema":"" } ], "responses":[ { "name":"201", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"status\": \"queued\",\n \"name\": \"Ubuntu 12.10\",\n \"tags\": [\n \"ubuntu\",\n \"quantal\"\n ],\n \"container_format\": \"bare\",\n \"created_at\": \"2014-11-11T20:47:55Z\",\n \"disk_format\": \"qcow2\",\n \"updated_at\": \"2014-11-11T20:47:55Z\",\n \"visibility\": \"private\",\n \"self\": \"\/v2\/images\/b2173dd3-7ad6-4362-baa6-a68bce3565ca\",\n \"min_disk\": 0,\n \"protected\": false,\n \"id\": \"b2173dd3-7ad6-4362-baa6-a68bce3565ca\",\n \"file\": \"\/v2\/images\/b2173dd3-7ad6-4362-baa6-a68bce3565ca\/file\",\n \"owner\": \"b4eedccc6fb74fa8a7ad6b08382b852b\",\n \"min_ram\": 0,\n \"schema\": \"\/v2\/schemas\/image\",\n \"size\": null,\n \"checksum\": null,\n \"virtual_size\": null\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Get image details", "description":"\n Gets details for a specified image.\n (Since Image API v2.0.)\n \n Response body is a single image entity.\n Preconditions\n \n \n The specified image must exist.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"status\": \"active\",\n \"name\": \"cirros-0.3.2-x86_64-disk\",\n \"tags\": [],\n \"container_format\": \"bare\",\n \"created_at\": \"2014-05-05T17:15:10Z\",\n \"disk_format\": \"qcow2\",\n \"updated_at\": \"2014-05-05T17:15:11Z\",\n \"visibility\": \"public\",\n \"self\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"min_disk\": 0,\n \"protected\": false,\n \"id\": \"1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"file\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\/file\",\n \"checksum\": \"64d7c1cd2b6f60c92c14662941cb7913\",\n \"owner\": \"5ef70662f8b34079a6eddb8da9d75fe8\",\n \"size\": 13167616,\n \"min_ram\": 0,\n \"schema\": \"\/v2\/schemas\/image\",\n \"virtual_size\": null\n}\n", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"404", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PATCH", "name":"Update image", "description":"\n \n Updates a specified image. (Since Image API v2.0.)\n \n \n Depending on the referenced target location, this operation\n performs one of the following functions:\n \n \n \n \n The target location is an array index. A new value is\n inserted into the array at the specified index.\n \n \n \n \n The target location is an object member that does not\n exist. A new member is added to the object.\n \n \n \n \n The target location is an object member that exists.\n The member value is replaced.\n \n \n \n \n The operation object MUST contain a value member that\n specifies the value to add. For example:\n \n{\n \"op\": \"add\",\n \"path\": \"\/a\/b\/c\",\n \"value\": [\n \"foo\",\n \"bar\"\n ]\n}\n \n The target location MUST reference one of these values:\n \n \n \n \n The root of the target document. The specified value is the\n entire content of the target document.\n \n \n \n \n A member to add to an object. The specified value is added\n to that object at the specified location. If the member\n already exists, it is replaced by the specified value.\n \n \n \n \n An element to add to the array. The specified value is added\n to the array at the specified location. Any element that is\n at or above the specified index is shifted one position to\n the right. The specified index MUST NOT be greater than the\n number of elements in the array. If the hyphen (-) character\n is used to index the end of the array (see [RFC6901]), the\n value is appended to the array.\n \n \n \n \n Because this operation adds to existing objects and arrays, its\n target location often does not exist.\n \n \n The request body must conform to one of these media types:\n \n \n \n application\/openstack-images-v2.0-json-patch\n \n \n application\/openstack-images-v2.1-json-patch\n (Since Image API v2.2.)\n \n \n \n \n You can also use the PATCH method to add or remove image\n properties.\n \n \n For information about the PATCH method and the available media\n types, see Image API v2\n HTTP PATCH media types.\n \n Preconditions\n \n \n \n When you add or replace a location to the specified image,\n you must set the disk_format and\n container_format parameters in the image.\n \n \n \n \n When you replace a location, a location must be previously\n set in the image.\n \n \n \n Synchronous Postconditions\n \n \n \n With correct permissions, you can view the updated values of\n the attributes of the image.\n \n \n \n \n After you add a location to an image that had no location\n and with correct permissions, you can use API calls to view\n the image status as active.\n \n \n \n \n After you remove all locations from the image and with\n correct permissions, you can use API calls to view the image\n status as queued.\n \n \n \n Troubleshooting\n \n \n \n If you cannot update locations, your request might be\n missing some information. Make sure that you meet the\n preconditions and run the request again. If the request\n fails again, review your API request.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"[\n {\n \"op\": \"replace\",\n \"path\": \"\/name\",\n \"value\": \"Fedora 17\"\n },\n {\n \"op\": \"replace\",\n \"path\": \"\/tags\",\n \"value\": [\n \"fedora\",\n \"beefy\"\n ]\n }\n]", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"id\": \"da3b75d9-3f4a-40e7-8a2c-bfab23927dea\",\n \"name\": \"Fedora 17\",\n \"status\": \"active\",\n \"visibility\": \"public\",\n \"size\": 2254249,\n \"checksum\": \"2cec138d7dae2aa59038ef8c9aec2390\",\n \"tags\": [\n \"fedora\",\n \"beefy\"\n ],\n \"created_at\": \"2012-08-10T19:23:50Z\",\n \"updated_at\": \"2012-08-12T11:11:33Z\",\n \"self\": \"\/v2\/images\/da3b75d9-3f4a-40e7-8a2c-bfab23927dea\",\n \"file\": \"\/v2\/images\/da3b75d9-3f4a-40e7-8a2c-bfab23927dea\/file\",\n \"schema\": \"\/v2\/schemas\/image\",\n \"owner\": null,\n \"min_ram\": null,\n \"min_disk\": null,\n \"disk_format\": null,\n \"virtual_size\": null,\n \"container_format\": null\n}\n", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Delete image", "description":"\n Deletes a specified image. (Since\n Image API v2.0.)\n \n You cannot delete images with the 'protected'\n attribute set to true (boolean).\n \n Preconditions\n \n \n You can delete an image in all status\n except deleted.\n \n \n \n You must first set the 'protected' attribute\n to false (boolean) and then perform\n the delete.\n \n \n \n Synchronous Postconditions\n \n \n The response is empty and returns the\n HTTP 204 status code.\n \n \n \n The image is deleted in images index.\n \n \n \n The binary image data managed by OpenStack\n Image service is deleted from the storage node if the\n deleted image stores image data in the node.\n \n \n \n TroubleShooting\n \n \n \n The response returns the HTTP 403 status code when the\n protected attribute is set to\n true even if you have correct permissions.\n Ensure that you meet the preconditions and run the request\n again. If the request fails again, review your API request.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}/actions/reactivate", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Reactivate image", "description":"\n Reactivates a specified image.\n (Since Image API v2.0.)\n \n \n The reactivate operation returns an error if the image status is\n not active or deactivated.\n \n Preconditions\n \n \n The specified image must exist.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"204", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"status\": \"active\",\n \"name\": \"cirros-0.3.2-x86_64-disk\",\n \"tags\": [],\n \"container_format\": \"bare\",\n \"created_at\": \"2014-05-05T17:15:10Z\",\n \"disk_format\": \"qcow2\",\n \"updated_at\": \"2014-05-05T17:15:11Z\",\n \"visibility\": \"public\",\n \"self\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"min_disk\": 0,\n \"protected\": false,\n \"id\": \"1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"file\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\/file\",\n \"checksum\": \"64d7c1cd2b6f60c92c14662941cb7913\",\n \"owner\": \"5ef70662f8b34079a6eddb8da9d75fe8\",\n \"size\": 13167616,\n \"min_ram\": 0,\n \"schema\": \"\/v2\/schemas\/image\",\n \"virtual_size\": null\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}/actions/deactivate", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"POST", "name":"Deactivate image", "description":"\n Deactivates a specified image.\n (Since Image API v2.0.)\n \n \n If you try to download a deactivated image, the 403 Forbidden\n error is returned. Also, image locations are not visible for\n deactivated images unless the user is an administrative user.\n \n \n The deactivate operation returns an error if the image status is\n not active or deactivated.\n \n Preconditions\n \n \n The specified image must exist.\n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"204", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"status\": \"deactivated\",\n \"name\": \"cirros-0.3.2-x86_64-disk\",\n \"tags\": [],\n \"container_format\": \"bare\",\n \"created_at\": \"2014-05-05T17:15:10Z\",\n \"disk_format\": \"qcow2\",\n \"updated_at\": \"2014-05-05T17:15:11Z\",\n \"visibility\": \"public\",\n \"self\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"min_disk\": 0,\n \"protected\": false,\n \"id\": \"1bea47ed-f6a9-463b-b423-14b9cca9ad27\",\n \"file\": \"\/v2\/images\/1bea47ed-f6a9-463b-b423-14b9cca9ad27\/file\",\n \"checksum\": \"64d7c1cd2b6f60c92c14662941cb7913\",\n \"owner\": \"5ef70662f8b34079a6eddb8da9d75fe8\",\n \"size\": 13167616,\n \"min_ram\": 0,\n \"schema\": \"\/v2\/schemas\/image\",\n \"virtual_size\": null\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}/file", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"PUT", "name":"Upload binary image data", "description":"\n Uploads binary image data. (Since\n Image API v2.0.)\n \n Set the Content-Type request header to\n application\/octet-stream.\n \n Example call: curl -i -X PUT -H \"X-Auth-Token:\n $token\" -H \"Content-Type:\n application\/octet-stream\" -d\n @\/home\/glance\/ubuntu-12.10.qcow2\n $image_url\/v2\/images\/{image_id}\/file\n \n Preconditions\n \n Before you can store binary image data, you must meet the\n following preconditions:\n \n \n \n \n The specified image must exist.\n \n \n \n \n You must set the disk and container formats in the image.\n \n \n \n The image status must be queued.\n \n \n \n Your image storage quota must be sufficient.\n \n \n \n \n The size of the data that you want to store must not exceed\n the size that the OpenStack Image service allows.\n \n \n \n Synchronous Postconditions\n \n \n With correct permissions, you can see the\n image status as active through API calls.\n \n \n \n With correct access, you can see the stored\n data in the storage system that OpenStack Image service\n manages.\n \n \n \n Troubleshooting\n \n \n \n If you cannot store the data, your request might lack\n information or you exceeded your allotted quota. Ensure that\n you meet the preconditions and run the request again. If the\n request fails again, review your API request.\n \n \n \n \n The storage back ends for storing the data must have enough\n free storage space to accommodate the size of the data.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"GET", "name":"Download binary image data", "description":"\n Downloads binary image data. (Since\n Image API v2.0.)\n \n Example call: curl -i -X GET -H \"X-Auth-Token:\n $token\"\n $image_url\/v2\/images\/{image_id}\/file\n \n \n The response body contains the raw binary data that represents the\n actual virtual disk. The Content-Type header contains\n the value application\/octet-stream. The Content-MD5 header contains an MD5 checksum of the image\n data. Clients are encouraged to verify the integrity of the image\n data they receive by using this checksum.\n \n \n Preconditions\n \n \n The specified images must exist.\n \n \n Synchronous Postconditions\n \n \n You can download the binary image data\n in your machine if the specified image has image\n data.\n \n \n \n If image data exists, the call returns the\n HTTP 200 status code.\n \n \n \n If no image data exists, the call returns\n the HTTP 204 status code.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}/tags/{tag}", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] }, "tag":{ "description":"\n Image tag.\n", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"PUT", "name":"Add image tag", "description":"\n \n Adds a specified tag to a specified image. (Since Image API v2.0.)\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] }, { "method":"DELETE", "name":"Delete image tag", "description":"\n \n Deletes a specified tag from a specified image. (Since Image API\n v2.0.)\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[  ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}/members", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"List image members", "description":"\n Lists the tenants with whom this\n image has been shared. (Since Image API v2.1.)\n \n If a user with whom this image is shared makes this\n call, the member list contains only information for\n that user.\n \n If a user with whom this image has not been shared\n makes this call, the call returns the HTTP 404 status\n code.\n \n Preconditions\n \n \n The specified image must exist.\n \n \n \n You must be the owner or a member of\n the specified image.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"members\": [\n {\n \"created_at\": \"2013-10-07T17:58:03Z\",\n \"image_id\": \"dbc999e3-c52f-4200-bedd-3b18fe7f87fe\",\n \"member_id\": \"123456789\",\n \"schema\": \"\/v2\/schemas\/member\",\n \"status\": \"pending\",\n \"updated_at\": \"2013-10-07T17:58:03Z\"\n },\n {\n \"created_at\": \"2013-10-07T17:58:55Z\",\n \"image_id\": \"dbc999e3-c52f-4200-bedd-3b18fe7f87fe\",\n \"member_id\": \"987654321\",\n \"schema\": \"\/v2\/schemas\/member\",\n \"status\": \"accepted\",\n \"updated_at\": \"2013-10-08T12:08:55Z\"\n }\n ],\n \"schema\": \"\/v2\/schemas\/members\"\n}\n", "schema":"" } ] } ] }, { "method":"POST", "name":"Create image member", "description":"\n Adds a specified tenant ID as an\n image member. (Since Image API v2.1.)\n \n Preconditions\n \n \n The specified images must exist.\n \n \n \n You can only add a new member to an\n image which 'visibility' attribute is private.\n \n \n \n You must be the owner of the specified\n image.\n \n \n \n Synchronous Postconditions\n \n \n With correct permissions, you can see\n the member status of the image as pending\n through API calls.\n \n \n \n Troubleshooting\n \n \n \n Even if you have correct permissions, if the\n visibility attribute is set to public, the request\n returns the HTTP 403 error code. Ensure that you meet the preconditions\n and run the request again. If the request fails again,\n review your API request.\n \n \n \n \n If the specified member is already a member for the image,\n the service returns the HTTP 409 Conflict error code. In\n case you meant a different member, double-check that you\n specified the correct member.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"member\": \"8989447062e04a818baf9e073fd04fa7\"\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"created_at\": \"2013-09-20T19:22:19Z\",\n \"image_id\": \"a96be11e-8536-4910-92cb-de50aa19dfe6\",\n \"member_id\": \"8989447062e04a818baf9e073fd04fa7\",\n \"schema\": \"\/v2\/schemas\/member\",\n \"status\": \"pending\",\n \"updated_at\": \"2013-09-20T19:25:31Z\"\n}\n", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"409", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/images/{image_id}/members/{member_id}", "parameters":{ "image_id":{ "description":"\n \n Image ID stored through the image API. Typically a UUID.\n \n", "type":"csapi:uuid", "required":"true", "default":"", "example":"", "values":[  ] }, "member_id":{ "description":"\n \n Image member ID. For example, the tenant ID of the user with whom the\n image is being shared.\n \n", "type":"xsd:string", "required":"", "default":"", "example":"", "values":[  ] } }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show image member details", "description":"\n Shows image member details.\n Response body is a single image member entity.\n (Since Image API v2.2.)\n \n Preconditions\n \n \n The specified image must exist.\n \n \n \n You must be the owner or a member of\n the specified image.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"status\": \"pending\",\n \"created_at\": \"2013-11-26T07:21:21Z\",\n \"updated_at\": \"2013-11-26T07:21:21Z\",\n \"image_id\": \"0ae74cc5-5147-4239-9ce2-b0c580f7067e\",\n \"member_id\": \"8989447062e04a818baf9e073fd04fa7\",\n \"schema\": \"\/v2\/schemas\/member\"\n}\n", "schema":"" } ] } ] }, { "method":"DELETE", "name":"Delete image member", "description":"\n Deletes a specified tenant ID from\n the member list of the specified image. (Since Image\n API v2.1.)\n \n Preconditions\n \n \n The specified image must exist.\n \n \n \n You must be the owner of the specified\n image.\n \n \n \n Synchronous Postconditions\n \n \n The specified member is removed from\n the image members.\n \n \n \n Troubleshooting\n \n \n \n Even if you have correct permissions, if you are not the\n owner of the specified image, the request returns the HTTP\n 403 error code. Ensure that you meet the preconditions\n and run the request again. If the request fails again,\n review your API request.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[  ], "responses":[ { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/xml" } }, "body":"", "schema":"" }, { "name":"403", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ] } ] }, { "method":"PUT", "name":"Update image member", "description":"\n Sets the specified status for the\n specified member of the specified image. (Since Image\n API v2.1.)\n \n Preconditions\n \n \n The specified images must exist.\n \n \n \n You must be a member of the\n specified image.\n \n \n \n Synchronous Postconditions\n \n \n If you update the member status to\n accepted and have the correct permissions,\n you see the image in list images responses.\n \n \n \n With correct permissions, you can see\n the updated member status of the image through API\n calls.\n \n \n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"status\": \"accepted\"\n}\n", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"created_at\": \"2013-09-20T19:22:19Z\",\n \"image_id\": \"a96be11e-8536-4910-92cb-de50aa19dfe6\",\n \"member_id\": \"8989447062e04a818baf9e073fd04fa7\",\n \"schema\": \"\/v2\/schemas\/member\",\n \"status\": \"accepted\",\n \"updated_at\": \"2013-09-20T20:15:31Z\"\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/tasks{?type,status,sort_key,sort_dir}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"POST", "name":"Create tasks", "description":"\n Creates a task.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"type\": \"import\",\n \"input\": {\n \"import_from\": \"http:\/\/example.com\",\n \"import_from_format\": \"qcow2\",\n \"image_properties\": {\n \"disk_format\": \"vhd\",\n \"container_format\": \"ovf\"\n }\n }\n}\n", "schema":"" } ], "responses":[  ] } ] }, { "method":"GET", "name":"List tasks", "description":"\n Lists tasks.\n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"tasks\": [\n {\n \"id\": \"cbc36478b0bd8e67e89469c7749d4127\",\n \"type\": \"import\",\n \"status\": \"pending\"\n },\n {\n \"id\": \"bbc36578b0bd8e67e89469c7749d4126\",\n \"type\": \"import\",\n \"status\": \"processing\"\n }\n ]\n}\n", "schema":"" } ] } ] } ] }, { "name":"", "description":"", "uriTemplate":"/v2/tasks/{task_id}", "parameters":{  }, "headers":{  }, "actions":[ { "method":"GET", "name":"Show tasks", "description":"\n Shows details for a specified task.\n \n", "parameters":{  }, "headers":{  }, "examples":[ { "name":"", "description":"", "requests":[ { "name":"", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"", "schema":"" } ], "responses":[ { "name":"200", "description":"", "headers":{ "Content-Type":{ "value":"application/json" } }, "body":"{\n \"id\": \"e7e59ff6-fa2e-4075-87d3-1a1398a07dc3\",\n \"type\": \"import\",\n \"status\": \"pending\"\n}\n", "schema":"" } ] } ] } ] } ] } ] }